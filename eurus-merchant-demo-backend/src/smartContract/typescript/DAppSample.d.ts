/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type Approval = ContractEventLog<{
  owner: string;
  spender: string;
  value: string;
  0: string;
  1: string;
  2: string;
}>;
export type Event = ContractEventLog<{
  0: string;
}>;
export type OwnerAdded = ContractEventLog<{
  owner: string;
  0: string;
}>;
export type OwnerRemoved = ContractEventLog<{
  owner: string;
  0: string;
}>;
export type OwnershipTransferred = ContractEventLog<{
  previousOwner: string;
  newOwner: string;
  0: string;
  1: string;
}>;
export type ReaderAdded = ContractEventLog<{
  reader: string;
  0: string;
}>;
export type ReaderRemoved = ContractEventLog<{
  reader: string;
  0: string;
}>;
export type Transfer = ContractEventLog<{
  from: string;
  to: string;
  value: string;
  0: string;
  1: string;
  2: string;
}>;
export type WriterAdded = ContractEventLog<{
  writer: string;
  0: string;
}>;
export type WriterRemoved = ContractEventLog<{
  writer: string;
  0: string;
}>;
export type refunded = ContractEventLog<{
  dest: string;
  srcAmount: string;
  targetAmount: string;
  srcAssetName: string;
  targetAssetName: string;
  extraData: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
  5: string;
}>;

export interface DAppSample extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): DAppSample;
  clone(): DAppSample;
  methods: {
    addOwner(newOwner: string): NonPayableTransactionObject<void>;

    addReader(newReader: string): NonPayableTransactionObject<void>;

    addWriter(newWriter: string): NonPayableTransactionObject<void>;

    /**
     * See {IERC20-allowance}.
     */
    allowance(
      owner: string,
      spender: string
    ): NonPayableTransactionObject<string>;

    /**
     * See {IERC20-approve}.     * Requirements:     * - `spender` cannot be the zero address.
     */
    approve(
      spender: string,
      amount: number | string | BN
    ): NonPayableTransactionObject<boolean>;

    /**
     * See {IERC20-balanceOf}.
     */
    balanceOf(account: string): NonPayableTransactionObject<string>;

    config(): NonPayableTransactionObject<string>;

    /**
     * Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`).     * Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called.     * NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.
     */
    decimals(): NonPayableTransactionObject<string>;

    /**
     * Atomically decreases the allowance granted to `spender` by the caller.     * This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}.     * Emits an {Approval} event indicating the updated allowance.     * Requirements:     * - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.
     */
    decreaseAllowance(
      spender: string,
      subtractedValue: number | string | BN
    ): NonPayableTransactionObject<boolean>;

    getOwnerCount(): NonPayableTransactionObject<string>;

    getOwners(): NonPayableTransactionObject<string[]>;

    getReaderList(): NonPayableTransactionObject<string[]>;

    getWriterList(): NonPayableTransactionObject<string[]>;

    /**
     * Atomically increases the allowance granted to `spender` by the caller.     * This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}.     * Emits an {Approval} event indicating the updated allowance.     * Requirements:     * - `spender` cannot be the zero address.
     */
    increaseAllowance(
      spender: string,
      addedValue: number | string | BN
    ): NonPayableTransactionObject<boolean>;

    init(
      name_: string,
      symbol_: string,
      totalSupply_: number | string | BN,
      decimals_: number | string | BN
    ): NonPayableTransactionObject<void>;

    isOwner(addr: string): NonPayableTransactionObject<boolean>;

    isWriter(addr: string): NonPayableTransactionObject<boolean>;

    /**
     * Returns the name of the token.
     */
    name(): NonPayableTransactionObject<string>;

    removeOwner(owner: string): NonPayableTransactionObject<void>;

    removerReader(existingReader: string): NonPayableTransactionObject<void>;

    removerWriter(existingWriter: string): NonPayableTransactionObject<void>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(): NonPayableTransactionObject<void>;

    setExternalSmartContractConfig(
      extAddr: string
    ): NonPayableTransactionObject<void>;

    /**
     * Returns the symbol of the token, usually a shorter version of the name.
     */
    symbol(): NonPayableTransactionObject<string>;

    /**
     * See {IERC20-totalSupply}.
     */
    totalSupply(): NonPayableTransactionObject<string>;

    /**
     * See {IERC20-transfer}.     * Requirements:     * - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`.
     */
    transfer(
      recipient: string,
      amount: number | string | BN
    ): NonPayableTransactionObject<boolean>;

    /**
     * See {IERC20-transferFrom}.     * Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}.     * Requirements:     * - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`.
     */
    transferFrom(
      sender: string,
      recipient: string,
      amount: number | string | BN
    ): NonPayableTransactionObject<boolean>;

    mintCustomToken(
      receivedTokenSymbol: string,
      amount: number | string | BN,
      dest: string,
      extraData: string | number[]
    ): NonPayableTransactionObject<void>;

    refund(
      targetAssetName: string,
      srcAmount: number | string | BN,
      dest: string,
      extraData: string | number[]
    ): NonPayableTransactionObject<void>;
  };
  events: {
    Approval(cb?: Callback<Approval>): EventEmitter;
    Approval(options?: EventOptions, cb?: Callback<Approval>): EventEmitter;

    Event(cb?: Callback<Event>): EventEmitter;
    Event(options?: EventOptions, cb?: Callback<Event>): EventEmitter;

    OwnerAdded(cb?: Callback<OwnerAdded>): EventEmitter;
    OwnerAdded(options?: EventOptions, cb?: Callback<OwnerAdded>): EventEmitter;

    OwnerRemoved(cb?: Callback<OwnerRemoved>): EventEmitter;
    OwnerRemoved(
      options?: EventOptions,
      cb?: Callback<OwnerRemoved>
    ): EventEmitter;

    OwnershipTransferred(cb?: Callback<OwnershipTransferred>): EventEmitter;
    OwnershipTransferred(
      options?: EventOptions,
      cb?: Callback<OwnershipTransferred>
    ): EventEmitter;

    ReaderAdded(cb?: Callback<ReaderAdded>): EventEmitter;
    ReaderAdded(
      options?: EventOptions,
      cb?: Callback<ReaderAdded>
    ): EventEmitter;

    ReaderRemoved(cb?: Callback<ReaderRemoved>): EventEmitter;
    ReaderRemoved(
      options?: EventOptions,
      cb?: Callback<ReaderRemoved>
    ): EventEmitter;

    Transfer(cb?: Callback<Transfer>): EventEmitter;
    Transfer(options?: EventOptions, cb?: Callback<Transfer>): EventEmitter;

    WriterAdded(cb?: Callback<WriterAdded>): EventEmitter;
    WriterAdded(
      options?: EventOptions,
      cb?: Callback<WriterAdded>
    ): EventEmitter;

    WriterRemoved(cb?: Callback<WriterRemoved>): EventEmitter;
    WriterRemoved(
      options?: EventOptions,
      cb?: Callback<WriterRemoved>
    ): EventEmitter;

    refunded(cb?: Callback<refunded>): EventEmitter;
    refunded(options?: EventOptions, cb?: Callback<refunded>): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "Approval", cb: Callback<Approval>): void;
  once(event: "Approval", options: EventOptions, cb: Callback<Approval>): void;

  once(event: "Event", cb: Callback<Event>): void;
  once(event: "Event", options: EventOptions, cb: Callback<Event>): void;

  once(event: "OwnerAdded", cb: Callback<OwnerAdded>): void;
  once(
    event: "OwnerAdded",
    options: EventOptions,
    cb: Callback<OwnerAdded>
  ): void;

  once(event: "OwnerRemoved", cb: Callback<OwnerRemoved>): void;
  once(
    event: "OwnerRemoved",
    options: EventOptions,
    cb: Callback<OwnerRemoved>
  ): void;

  once(event: "OwnershipTransferred", cb: Callback<OwnershipTransferred>): void;
  once(
    event: "OwnershipTransferred",
    options: EventOptions,
    cb: Callback<OwnershipTransferred>
  ): void;

  once(event: "ReaderAdded", cb: Callback<ReaderAdded>): void;
  once(
    event: "ReaderAdded",
    options: EventOptions,
    cb: Callback<ReaderAdded>
  ): void;

  once(event: "ReaderRemoved", cb: Callback<ReaderRemoved>): void;
  once(
    event: "ReaderRemoved",
    options: EventOptions,
    cb: Callback<ReaderRemoved>
  ): void;

  once(event: "Transfer", cb: Callback<Transfer>): void;
  once(event: "Transfer", options: EventOptions, cb: Callback<Transfer>): void;

  once(event: "WriterAdded", cb: Callback<WriterAdded>): void;
  once(
    event: "WriterAdded",
    options: EventOptions,
    cb: Callback<WriterAdded>
  ): void;

  once(event: "WriterRemoved", cb: Callback<WriterRemoved>): void;
  once(
    event: "WriterRemoved",
    options: EventOptions,
    cb: Callback<WriterRemoved>
  ): void;

  once(event: "refunded", cb: Callback<refunded>): void;
  once(event: "refunded", options: EventOptions, cb: Callback<refunded>): void;
}
