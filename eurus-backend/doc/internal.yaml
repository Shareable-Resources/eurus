openapi: 3.0.1
info:
  title: Internal API version 0.1
  description: Eurus Internal API specification version 0.1
  termsOfService: http://swagger.io/terms/
  contact:
    email: placeholder@18m.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
servers:
- url: https://ToBeConfirmed/
  description: Development server
- url: http://ToBeConfirmed/
  description: Production server
tags:
- name: config
  description: Server config related service
- name: asset config
  description: Asset related config
- name: auth config
  description: Auth related config
- name: system config
  description: System-side configurations
- name: sign
  description: Sign service
- name: kyc
  description: KYC service
- name: sweep
  description: Sweep Service
paths:
  /config/asset/public-currency:
    get:
      tags:
      - asset config
      summary: Get erc-20 smart contract address by asset name at EurusInternalConfig (at rinkeby)
      operationId: getCurrencyAddr
      parameters:
          - in: header
            name: Authorization
            description: Login token
            schema:
              type: string
            required: true
      requestBody:
        content:
          'application/json':
            schema:
              type: object
              $ref: "#/components/schemas/GetCurrencyAddressRequest"
      responses:
        '200':
          description: Return the erc-20 smart contract address
          content:
            'application/json':
              schema:
                  allOf:
                  - $ref: '#/components/schemas/GeneralResponse'
                  - type: object
                  properties:
                    data:
                      type: object
                      $ref: '#/components/schemas/GetCurrencyAddressResponse'
    post:
        tags:
        - asset config
        summary: Add currency by name and address at EurusInternalConfig (at rinkeby)
        operationId: addCurrency
        parameters:
          - in: header
            name: Authorization
            description: Login token
            schema:
              type: string
            required: true
        requestBody:
          content:
            'application/json':
              schema:
                type: object
                $ref: "#/components/schemas/AddCurrencyRequest"
        responses:
          '200':
            description: Return when the operation is successful
            content:
              'application/json':
                schema:
                    allOf:
                    - $ref: '#/components/schemas/GeneralResponse'
                    - type: object
                    properties:
                      data:
                        type: object
                        $ref: '#/components/schemas/SCTransactionResponse'
  /config/asset/public-currency/{asset}:
    get:
      tags:
        - asset config
      summary: Get asset name by address from EurusInternalConfig (at rinkeby)
      operationId: getCurrencyName
      parameters:
        - in: header
          name: Authorization
          description: Login token
          schema:
            type: string
          required: true
        - in: path
          name: asset
          description: asset address
          schema:
            type: string
          required:  true
      responses:
          '200':
            description: Return when the operation is successful
            content:
              'application/json':
                schema:
                    allOf:
                    - $ref: '#/components/schemas/GeneralResponse'
                    - type: object
                    properties:
                      data:
                          properties:
                            assetName:
                              type: string


    delete:
        tags:
        - asset config
        summary: Delete an asset from EurusInternalConfig (at rinkeby)
        operationId: deleteCurrency
        parameters:
          - in: header
            name: Authorization
            description: Login token
            schema:
              type: string
            required: true
          - in: path
            name: asset
            description: asset name
            schema:
              type: string
            required:  true
        responses:
          '200':
            description: Return when the operation is successful
            content:
              'application/json':
                schema:
                    allOf:
                    - $ref: '#/components/schemas/GeneralResponse'
                    - type: object
                    properties:
                      data:
                        type: object
                        $ref: '#/components/schemas/SCTransactionResponse'


  /config/asset/currency:
    get:
      tags:
      - asset config
      summary: Get erc-20 smart contract address by asset name from ExternalSmartContractConfig
      operationId: getCurrencyAddrFromSC
      parameters:
          - in: header
            name: Authorization
            description: Login token
            schema:
              type: string
            required: true
      requestBody:
        content:
          'application/json':
            schema:
              type: object
              $ref: "#/components/schemas/GetCurrencyAddressRequest"
      responses:
        '200':
          description: Return the erc-20 smart contract address
          content:
            'application/json':
              schema:
                  allOf:
                  - $ref: '#/components/schemas/GeneralResponse'
                  - type: object
                  properties:
                    data:
                      type: object
                      $ref: '#/components/schemas/GetCurrencyAddressResponse'
    post:
        tags:
        - asset config
        summary: Add currency by name and address to ExternalSmartContractConfig
        operationId: addCurrencyAddrToSC
        parameters:
          - in: header
            name: Authorization
            description: Login token
            schema:
              type: string
            required: true
        requestBody:
          content:
            'application/json':
              schema:
                type: object
                $ref: "#/components/schemas/AddCurrencyRequest"
        responses:
          '200':
            description: Return when the operation is successful
            content:
              'application/json':
                schema:
                    allOf:
                    - $ref: '#/components/schemas/GeneralResponse'
                    - type: object
                    properties:
                      data:
                        type: object
                        $ref: '#/components/schemas/SCTransactionResponse'


  /config/asset/currency/{asset}:
    get:
      tags:
        - asset config
      summary: Get asset name by address from ExternalSmartContractConfig
      operationId: getCurrencyNameFromSC
      parameters:
        - in: header
          name: Authorization
          description: Login token
          schema:
            type: string
          required: true
        - in: path
          name: asset
          description: asset address
          schema:
            type: string
          required:  true
      responses:
          '200':
            description: Return when the operation is successful
            content:
              'application/json':
                schema:
                    allOf:
                    - $ref: '#/components/schemas/GeneralResponse'
                    - type: object
                    properties:
                      data:
                          properties:
                            assetName:
                              type: string


    delete:
        tags:
        - asset config
        summary: Delete an asset from ExternalSmartContractConfig
        operationId: deleteCurrencyFromSC
        parameters:
          - in: header
            name: Authorization
            description: Login token
            schema:
              type: string
            required: true
          - in: path
            name: asset
            description: asset name
            schema:
              type: string
            required:  true
        responses:
          '200':
            description: Return when the operation is successful
            content:
              'application/json':
                schema:
                    allOf:
                    - $ref: '#/components/schemas/GeneralResponse'
                    - type: object
                    properties:
                      data:
                        type: object
                        $ref: '#/components/schemas/SCTransactionResponse'
  /config/asset/innet-wallet:
      post:
        tags:
        - asset config
        summary: Set the innet wallet address to InternalSmartContractConfig
        operationId: setInnetWalletAddress
        parameters:
          - in: header
            name: Authorization
            description: Login token
            schema:
              type: string
            required: true
        requestBody:
          content:
            'application/json':
              schema:
                type: object
                $ref: "#/components/schemas/SetWalletAddressRequest"
        responses:
          '200':
            description: Return when the operation is successful
            content:
              'application/json':
                schema:
                    allOf:
                    - $ref: '#/components/schemas/GeneralResponse'
                    - type: object
                    properties:
                      data:
                        type: object
                        $ref: '#/components/schemas/SCTransactionResponse'
      get:
        tags:
        - asset config
        summary: Get the innet  wallet address
        operationId: getInnetWalletAddress
        parameters:
          - in: header
            name: Authorization
            description: Login token
            schema:
              type: string
            required: true
        responses:
          '200':
            description: Return the mainnet wallet address
            content:
              'application/json':
                schema:
                    allOf:
                    - $ref: '#/components/schemas/GeneralResponse'
                    - type: object
                    properties:
                      data:
                        type: object
                        $ref: '#/components/schemas/GetAddressResponse'
  /config/asset/mainnet-wallet:
      post:
        tags:
        - asset config
        summary: Set the mainnet wallet address to InternalSmartContractConfig
        operationId: setMainnetWalletAddress
        parameters:
          - in: header
            name: Authorization
            description: Login token
            schema:
              type: string
            required: true
        requestBody:
          content:
            'application/json':
              schema:
                type: object
                $ref: "#/components/schemas/SetWalletAddressRequest"
        responses:
          '200':
            description: Return when the operation is successful
            content:
              'application/json':
                schema:
                    allOf:
                    - $ref: '#/components/schemas/GeneralResponse'
                    - type: object
                    properties:
                      data:
                        type: object
                        $ref: '#/components/schemas/SCTransactionResponse'

      get:
        tags:
        - asset config
        summary: Get the mainnet wallet address
        operationId: getMainnetWalletAddress
        parameters:
          - in: header
            name: Authorization
            description: Login token
            schema:
              type: string
            required: true
        responses:
          '200':
            description: Return the mainnet wallet address
            content:
              'application/json':
                schema:
                    allOf:
                    - $ref: '#/components/schemas/GeneralResponse'
                    - type: object
                    properties:
                      data:
                        type: object
                        $ref: '#/components/schemas/GetAddressResponse'
  /config/asset/withdraw-fee-eth:
    post:
      tags:
      - asset config
      summary: Set the withdrawfee of ETH
      operationId: setWithdrawFee
      parameters:
        - in: header
          name: Authorization
          description: Login token
          schema:
            type: string
          required: true
      requestBody:
        content:
          'application/json':
            schema:
              type: object
              $ref: "#/components/schemas/SetWithdrawFeeRequest"
      responses:
        '200':
          description: Return when the operation is successful
          content:
            'application/json':
              schema:
                  allOf:
                  - $ref: '#/components/schemas/GeneralResponse'
                  - type: object
                  properties:
                    data:
                      type: object
                      $ref: '#/components/schemas/SCTransactionResponse'
  /config/asset/public-currency-db:
    post:
      tags:
      - asset config
      summary: Set currency data into DB
      operationId: publicCurrencyDb
      parameters:
        - in: header
          name: Authorization
          description: Server login token
          schema:
            type: string
          required: true
      requestBody:
        content:
          'application/json':
            schema:
              allOf:
                - $ref: "#/components/schemas/SetWithdrawFeeRequest"
                - type: object
                  properties:
                    data:
                      type: object
                      properties:
                        decimal:
                          type: integer
                          description: Decimal point
                        assetName:
                          type: string
                          description: Asset name
                        currencyId:
                          type: string
                          description: coingeck currency id
                        autoUpdate:
                          type: boolean
                          description: Is currency auto update admin fee exchange rate
      responses:
        '200':
          description: Return when the operation is successful
          content:
            'application/json':
              schema:
                allOf:
                - $ref: '#/components/schemas/GeneralResponse'
    get:
      tags:
      - asset config
      summary: get currency data into DB
      parameters:
        - in: header
          name: Authorization
          description: Server login token
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Return when the operation is successful
          content:
            'application/json':
              schema:
                allOf:
                - $ref: '#/components/schemas/GeneralResponse'
                - type: object
                  properties:
                    data:
                      type: object
                      properties:
                        decimal:
                          type: integer
                          description: Decimal point
                        assetName:
                          type: string
                          description: Asset name
                        currencyId:
                          type: string
                          description: coingeck currency id
                        autoUpdate:
                          type: boolean
                          description: Is currency auto update admin fee exchange rate
  /config/asset/faucet-config:
    get:
      tags:
      - asset config
      summary: Get Faucet config
      operationId: getFaucetConfig
      parameters:
          - in: header
            name: Authorization
            description: Login token
            schema:
              type: string
            required: true
      requestBody:
        content:
          'application/json':
            schema:
              type: object
              $ref: "#/components/schemas/GetCurrencyAddressRequest"
      responses:
        '200':
          description: Return the erc-20 smart contract address
          content:
            'application/json':
              schema:
                  allOf:
                  - $ref: '#/components/schemas/GeneralResponse'
                  - type: object
                  properties:
                    data:
                      type: object
                      $ref: '#/components/schemas/GetCurrencyAddressResponse'
  /config/asset/settings:
    get:
      tags:
      - asset config
      summary: Get the list of all asset KYC withdraw, sweep trigger amount settings
      operationId: getAssetSettings
      parameters:
        - in: header
          name: Authorization
          description: Login token
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Return list of asset settings
          content:
            'application/json':
              schema:
                  allOf:
                  - $ref: '#/components/schemas/GeneralResponse'
                  - type: object
                  properties:
                    data:
                      type: array
                      items:
                        $ref: '#/components/schemas/AssetSetting'
  /config/asset/setting/{keyName}:
    get:
      tags:
      - asset config
      summary: Get asset setting by config key name (deprecated)
      operationId: getAssetSetting
      parameters:
        - in: header
          name: Authorization
          description: Server login token
          schema:
            type: string
          required: true
        - in: path
          name: keyName
          description: asset config key name
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: Return when the operation is successful
          content:
            'application/json':
              schema:
                allOf:
                - $ref: '#/components/schemas/GeneralResponse'
                - type: object
                  properties:
                    data:
                      type: string


  /config/mint/insert:
    post:
      tags:
      - config
      summary: Add deposit observer
      operationId: addDepositObserver
      parameters:
        - in: header
          name: Authorization
          description: Login token
          schema:
            type: string
          required: true
      requestBody:
        content:
          'application/json':
            schema:
              type: object
              $ref: "#/components/schemas/SetMintConfig"
      responses:
        '200':
          description: Return when the operation is successful
          content:
            'application/json':
              schema:
                type: object
                $ref: '#/components/schemas/GeneralResponse'


  /config/burn/insert:
      post:
        tags:
        - config
        summary: Add a withdraw observer
        operationId: addWithdrawObserver
        parameters:
          - in: header
            name: Authorization
            description: Login token
            schema:
              type: string
            required: true
        requestBody:
          content:
            'application/json':
              schema:
                type: object
                $ref: "#/components/schemas/SetBurnConfig"
        responses:
          '200':
            description: Return when the operation is successful
            content:
              'application/json':
                schema:
                  type: object
                  $ref: '#/components/schemas/GeneralResponse'

  /config/approval/insert:
    post:
      tags:
      - config
      summary: Add a approval server
      operationId: addApprovalServer
      parameters:
        - in: header
          name: Authorization
          description: Login token
          schema:
            type: string
          required: true
      requestBody:
        content:
          'application/json':
            schema:
              type: object
              $ref: "#/components/schemas/SetMintConfig"
      responses:
        '200':
          description: Return when the operation is successful
          content:
            'application/json':
              schema:
                type: object
                $ref: '#/components/schemas/GeneralResponse'


  /config/user/insert:
    post:
      tags:
      - config
      summary: Add a user server
      operationId: addUserServer
      parameters:
        - in: header
          name: Authorization
          description: Login token
          schema:
            type: string
          required: true
      requestBody:
        content:
          'application/json':
            schema:
              type: object
              $ref: "#/components/schemas/SetMintConfig"
      responses:
        '200':
          description: Return when the operation is successful
          content:
            'application/json':
              schema:
                type: object
                $ref: '#/components/schemas/GeneralResponse'



  /config/setting:
    get:
      tags:
      - config
      summary: Get the authen server setting
      operationId: getSetting
      responses:
        '200':
          description: Return the server IP, port and path
          content:
            'application/json':
              schema:
                  allOf:
                  - $ref: '#/components/schemas/GeneralResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        $ref: '#/components/schemas/ServerSetting'
  /config:
    post:
      tags:
      - config
      summary: Get the server config by serverId or by serverId and key. If request only has id, it will return all config server config with the targetted serverId config. Otherwise, it only return the config by serverId and key with config related smart contracts address.
      operationId: getConfig
      parameters:
        - in: header
          name: Authorization
          description: Login token
          schema:
            type: string
          required: true
      requestBody:
        content:
          'application/json':
            schema:
              type: object
              $ref: "#/components/schemas/ConfigRequest"
      responses:
        '200':
          description: Return the config info from database
          content:
            'application/json':
              schema:
                  allOf:
                  - $ref: '#/components/schemas/GeneralResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Config'
  /config/update:
    post:
      tags:
      - config
      summary: Add or Update the server config. is_service default is false if not exist in json
      operationId: AddConfig
      parameters:
        - in: header
          name: Authorization
          description: Login token
          schema:
            type: string
          required: true
      requestBody:
        content:
          'application/json':
            schema:
              type: object
              $ref: "#/components/schemas/AddConfig"
      responses:
        '200':
          description: Return when the operation is successful
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/GeneralResponse'
                type: object
  /config/{serverId}/{key}:
      delete:
        tags:
        - config
        summary: Delete the server config
        operationId: deleteConfig
        parameters:
          - in: header
            name: Authorization
            description: Login token
            schema:
              type: string
            required: true
          - in: path
            name: serverId
            description: serverId
            schema:
              type: string
            required:  true
          - in: path
            name: key
            description: key
            schema:
              type: string
            required:  true
        responses:
          '200':
            description: Return when the operation is successful
            content:
              'application/json':
                schema:
                  type: object
                  $ref: '#/components/schemas/GeneralResponse'
  /config/group/getGroupId:
      get:
        tags:
        - config
        summary: Get server group Id for the current server
        operationId: getGroupid
        parameters:
          - in: header
            name: Authorization
            description: Login token
            schema:
              type: string
            required: true
        requestBody:
          content:
            'application/json':
              schema:
                type: object
                $ref: "#/components/schemas/ConfigRequest"
        responses:
          '200':
            description: Return when the operation is successful
            content:
              'application/json':
                schema:
                  type: object
                  allOf:
                    - $ref: '#/components/schemas/GeneralResponse'
                    - type: object
                      properties:
                        data:
                          type: object
                          properties:
                            groupId: 
                              type: integer
                              format: int32
                              description: Group ID, 0 if not in a group

  /config/group/{groupId}/{key}:
      delete:
        tags:
        - config
        summary: Delete the server config when the is_service is false
        operationId: deleteConfig
        parameters:
          - in: header
            name: Authorization
            description: Login token
            schema:
              type: string
            required: true
          - in: path
            name: serverId
            description: serverId
            schema:
              type: string
            required:  true
          - in: path
            name: key
            description: key
            schema:
              type: string
            required:  true
        responses:
          '200':
            description: Return when the operation is successful
            content:
              'application/json':
                schema:
                  type: object
                  $ref: '#/components/schemas/GeneralResponse'

  /config/auth/all:
        post:
          tags:
          - config
          summary: Get the config and auth server config
          operationId: getAuthConfig
          parameters:
            - in: header
              name: Authorization
              description: Login token
              schema:
                type: string
              required: true
          responses:
            '200':
              description: Return all auth and config info
              content:
                'application/json':
                  schema:
                    allOf:
                    - $ref: '#/components/schemas/GeneralResponse'
                    - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          config:
                            type: array
                            items:
                              $ref: '#/components/schemas/Config'
                          auth:
                            type: array
                            items:
                              $ref: '#/components/schemas/Auth'
  /config/auth:
        post:
          tags:
          - auth config
          summary: Get all auth server info
          operationId: getAuth
          parameters:
            - in: header
              name: Authorization
              description: Login token
              schema:
                type: string
              required: true
          responses:
            '200':
                description: Return all config
                content:
                  'application/json':
                    schema:
                      allOf:
                      - $ref: '#/components/schemas/GeneralResponse'
                      - type: object
                      properties:
                        data:
                          type: array
                          items:
                            $ref: '#/components/schemas/Auth'
  /config/auth/insert:
        put:
          tags:
          - auth config
          summary: Add new auth server info by serviceName and pubKey. id will be incremented in the database automatically.
          operationId: insertAuth
          parameters:
            - in: header
              name: Authorization
              description: Login token
              schema:
                type: string
              required: true
          requestBody:
            content:
              'application/json':
                schema:
                  type: object
                  $ref: "#/components/schemas/AddAuth"
          responses:
            '200':
              description: Return when the operation is successful
              content:
                'application/json':
                  schema:
                    type: object
                    $ref: '#/components/schemas/GeneralResponse'
  /config/auth/update:
        post:
          tags:
          - auth config
          summary: Update the auth server info by id. Only serviceName and pubKey can be changed.
          operationId: updateAuth
          parameters:
            - in: header
              name: Authorization
              description: Login token
              schema:
                type: string
              required: true
          requestBody:
            content:
              'application/json':
                schema:
                  type: object
                  $ref: "#/components/schemas/UpdateAuth"
          responses:
            '200':
              description: Return when the operation is successful
              content:
                'application/json':
                  schema:
                    type: object
                    $ref: '#/components/schemas/GeneralResponse'

  /config/auth/{id}:
        delete:
          tags:
          - auth config
          summary: delete the auth server info
          operationId: delAuth
          parameters:
            - in: header
              name: Authorization
              description: Login token
              schema:
                type: string
              required: true
            - in: path
              name: id
              description: key
              schema:
                type: string
              required:  true
          responses:
            '200':
              description: Return when the operation is successful
              content:
                'application/json':
                  schema:
                    type: object
                    $ref: '#/components/schemas/GeneralResponse'
  /config/auth/setWalletAddress:
    post:
      tags:
        - auth config
      summary: Set server wallet address of the current server to auth server config
      operationId: setWalletAddress
      security:
        - bearerAuth: []
      requestBody:
        content:
          'application/json':
              schema:
                allOf:
                  - type: object
                    $ref: "#/components/schemas/GeneralRequest"
                  - type: object
                    properties:
                      walletAddress:
                        type: string
                        description: Server wallet address
      responses:
        '200':
          description: Success
          content:
            'application/json':
              schema:
                allOf:
                - $ref: '#/components/schemas/GeneralResponse'

                        

  /config/system/{key}:
    get:
      tags:
      - system config
      summary: Get the system-wide configuration of specified key
      operationId: getSystemConfig
      parameters:
        - in: header
          name: Authorization
          description: Login token
          schema:
            type: string
          required: true
        - in: path
          name: key
          description: Name of the configuration, this is an unique name in the system
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Return the configuration of specified key
          content:
            'application/json':
              schema:
                allOf:
                - $ref: '#/components/schemas/GeneralResponse'
                - type: object
                  properties:
                    data:
                      type: object
                      $ref: '#/components/schemas/SystemConfig'
    post:
      tags:
      - system config
      summary: Add new system config, or update existing one
      operationId: addOrUpdateSystemConfig
      parameters:
        - in: header
          name: Authorization
          description: Login token
          schema:
            type: string
          required: true
        - in: path
          name: key
          description: Name of the configuration, this is an unique name in the system
          schema:
            type: string
          required: true
      requestBody:
        content:
          'application/json':
            schema:
              type: object
              $ref: "#/components/schemas/AddOrUpdateSystemConfigRequest"
      responses:
        '200':
          description: If config does not exist, create it, otherwise update config value, given that caller's ServiceID and GroupID are permitted to change configuration
          content:
            'application/json':
              schema:
                allOf:
                - $ref: '#/components/schemas/GeneralResponse'
                - type: object
                  properties:
                    data:
                      type: object
                      $ref: '#/components/schemas/SystemConfigWithUpdateStatus'

  /config/key:
      post:
        tags:
          - config
        summary: generate an RSA Key pair
        parameters:
            - in: header
              name: Authorization
              description: Login token
              schema:
                type: string
              required: true
        responses:
          '200':
            description: Generated a new RSA key pair
            content:
              'application/json':
                schema:
                  allOf:
                    - $ref: '#/components/schemas/GeneralResponse'
                    - type: object
                      properties:
                        data:
                          type: object
                          properties:
                            privateKey:
                              type: string
                              description: base64 encoded RSA private key
                            publicKey:
                              type: string
                              description: base64 encoded RSA public key

  /sign/signTransaction:
    post:
      tags:
        - sign
      summary: Sign a transaction by owner key
      parameters:
            - in: header
              name: Authorization
              description: Server Login token
              schema:
                type: string
              required: true
      requestBody:
        content:
          'application/json':
            schema:
              type: object
              properties:
                data:
                  type: string
                  description: RLP encoded transaction byte array (Hex format)
      responses:
        '200':
          description: Return when the operation is successful
          content:
            'application/json':
              schema:
                type: object
                allOf:
                  -  $ref: '#/components/schemas/GeneralResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          signData:
                            type: string
                            description: Base64 signed transaction HASH
  /sign/getAddress:
    get:
      tags:
        - sign
      summary: Get owner wallet address
      parameters:
            - in: header
              name: Authorization
              description: Server Login token
              schema:
                type: string
              required: true
      responses:
        '200':
          description: Return when the operation is successful
          content:
            'application/json':
              schema:
                type: object
                allOf:
                  -  $ref: '#/components/schemas/GeneralResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          address:
                            type: string
                            description: Owner wallet address
  /sign/getPendingNonce:
    get:
      tags:
        - sign
      summary: Get Owner key pending nonce
      parameters:
            - in: header
              name: Authorization
              description: Server Login token
              schema:
                type: string
              required: true
      responses:
        '200':
          description: Return when the operation is successful
          content:
            'application/json':
              schema:
                type: object
                allOf:
                  -  $ref: '#/components/schemas/GeneralResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          pendingNonce:
                            type: integer
                            format: int64
                            description: Owner wallet pending nonce
  /sign/signUserWalletTransaction:
    post:
      tags:
        - sign
      summary: Sign centralized user wallet transaction by sign server HDwallet key in order to pay the gas fee for user
      parameters:
        - in: header
          name: Authorization
          description: Server Login token
          schema:
            type: string
          required: true
      requestBody:
        content:
            'application/json':
              schema:
                type: object
                properties:
                  to:
                    type: string
                    description: Destination userWallet address in Hex string format
                  value:
                    type: string
                    description: Send value in number string, can be empty string if no value send
                  gasPrice:
                    type: integer
                    format: int64
                    description: Gas price
                  inputFunction:
                    type: string
                    format: hex string
                    description: Function call with method ID and input argument , by ABI encode byte array
      responses:
        '200':
          description: Return when the operation is successful
          content:
            'application/json':
              schema:
                type: object
                allOf:
                  -  $ref: '#/components/schemas/GeneralResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          signedTx:
                            type: string
                            description: Signed transaction in Hex string (RLP encoded)

  #######################################   KYC   ############################################

  #### [User]->[KYC] ####
  /user/kyc/getKYCCountryList:
    get:
      security:
        - Bearer_JWT_LoginToken: []
      tags:
        - user
      summary: "[User]->[KYC] Get country code list for KYC verfication"
      description: "Send API from user/kyc/getKYCCountryList to /kyc/user/getKYCCountryList"
      operationId: /user/kyc/getKYCCountryList
      requestBody:
        content:
          "application/json":
            schema:
              allOf:
                - $ref: "#/components/schemas/GeneralRequest"
                - type: object
        required: true
      responses:
        200:
          description: successful operation
          content:
            "application/json":
              schema:
                allOf:
                  - $ref: "#/components/schemas/GeneralResponse"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          type: object
                          properties:
                            code:
                              type: string
                              example: AF
                              description: Primary Key - 'Two-letter country code (ISO 3166-1 alpha-2)'
                            name:
                              type: string
                              example: Afghanistan
                              description: English country name
                            fullName:
                              type: string
                              example: Islamic Republic of Afghanistan
                              description: Full English country name
                            iso3:
                              type: string
                              example: AFG
                              description: Three-letter country code (ISO 3166-1 alpha-3)
                            number:
                              type: string
                              example: "004"
                              description: Three-digit country number (ISO 3166-1 numeric)
                            continentCode:
                              type: string
                              example: AS
                              description: Which continent this country in 
  /user/kyc/createKYCStatus:
    post:
      security:
        - Bearer_JWT_LoginToken: []
      tags:
        - user
      summary:
        "[User]->[KYC] Request to create KYC Status"
      description: "Send API from user/kyc/createKYCStatus to /kyc/user/createKYCStatus"
      operationId: /user/kyc/createKYCStatus
      requestBody:
        content:
          "application/json":
            schema:
              allOf:
                - $ref: "#/components/schemas/GeneralRequest"
                - type: object
                  description: Any one of
                  properties:
                    kycCountryCode:
                      type: string
                      example: AF
                      description: Country code in table [kyc_country_codes]
                    kycDoc:
                      type: integer
                      example: 1
                      description: |
                        <p>(0)Unknown</p>
                        <p>(1)Passport</p>
                        <p>(2)ID Card</p>
        required: true
      responses:
        200:
          description: successful operation
          content:
            "application/json":
              schema:
                allOf:
                  - $ref: "#/components/schemas/GeneralResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          id:
                            type: integer
                            example: 1
                            description: Primary Key - table [user_kyc_status].id
  /user/kyc/submitKYCApproval:
    post:
      security:
        - Bearer_JWT_LoginToken: []
      tags:
        - user
      summary: "[User]->[KYC] Request to submit kyc approval"
      description: "Send API from user/kyc/submitKYCApproval to /kyc/user/submitKYCApproval, after submission the kycStatus will change to KYCStatusWaitingForApproval(1)"
      operationId: /user/kyc/submitKYCApproval
      requestBody:
        content:
          "application/json":
            schema:
              allOf:
                - $ref: "#/components/schemas/GeneralRequest"
                - type: object
                  description: Any one of
                  properties:
                    id:
                      type: integer
                      example: 142
                      description: user_kyc_status.id
        required: true
      responses:
        200:
          description: successful operation
          content:
            "application/json":
              schema:
                allOf:
                  - $ref: "#/components/schemas/GeneralResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        example: null
  /user/kyc/submitKYCDocument:
    post:
      security:
        - Bearer_JWT_LoginToken: []
      tags:
        - user
      summary: "[User]->[KYC] To upload an KYC image"
      description: "Request to upload kyc image. The API use form data to
        upload image of an KYC document one by one. When User server receive request of submitKYCDocument, User server will send
        a request to MQ, MQ Server will then digest the request and send back to KYC MQ queue. KYC Server will then send request to Amazon S3 to upload image, upon success upload to Amazon S3,
        KYC server will insert record in table [user_kyc_images] with S3 image path. The communication between User Server to KYC Server is via RabbitMQ"
      operationId: /user/kyc/submitKYCDocument
      requestBody:
        content:
          "multipart/form-data":
            schema:
              type: object
              description: Request JSON part
              properties:
                requestJson:
                  type: object
                  allOf:
                    - $ref: "#/components/schemas/GeneralRequest"
                    - type: string
                      description: '{"userKYCStatusId": 176, "imageType":0,"fileExtension":"jpg"}'
                  example: Content-Disposition<colon> form-data; name="requestJson"
                submitImage:
                  type: string
                  format: binary
                  description: Form multipart image binary data, 
                  example: Content-Disposition<colon> form-data; name="submitImage"; filename="attachment.txt"  

        required: true
      responses:
        200:
          description: successful operation
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/GeneralResponse"
  /user/kyc/getKYCStatusByToken:
    get:
      security:
        - Bearer_JWT_LoginToken: []
      tags:
        - user
      summary: "[User]->[KYC] Get KYC Status of a specific user based on login token"
      description: "Send API from user/kyc/getKYCStatusByToken to /kyc/user/userKYCStatus/{userId}"
      operationId: /user/kyc/getKYCStatusByToken
      responses:
        200:
          description: successful operation
          content:
            "application/json":
              schema:
                allOf:
                  - $ref: "#/components/schemas/GeneralResponse"
                  - type: object
                    properties:
                      kycLevel:
                        type: integer
                        example: 0
                        description: User' s KYC Level
                      data:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: integer
                              example: 1
                              description: Primary Key - user_kyc_status.id'
                            userId:
                              type: integer
                              example: 1
                              description:  "[Users].[id], represent the owner of this kyc status"
                            kycLevel:
                              type: integer
                              example: 1
                              description: Means what kyc level this status represents
                            approvalDate:
                              type: string
                              format: date-time
                              example: "2020-02-02"
                              description: Approval Date, null if not approved
                            operatorId:
                              type: integer
                              example: 1
                              description: The CS Admin's username
                            kycRetryCount:
                              type: string
                              example: 1
                              description: How many times this kyc status has been submitted
                            kycCountryCode:
                              type: string
                              example: AF
                              description: Country code in table [kyc_country_codes]
                            createdDate:
                              type: string
                              format: date-time
                              example: "2020-04-02"
                              description: Created Date
                            lastModifiedDate:
                              type: string
                              format: date-time
                              example: "2020-04-02"
                              description: Last Modified Date
                            kycStatus:
                              type: integer
                              example: 1
                              description: |
                                <p>(0)Pending</p>
                                <p>(1)Waiting For Approval</p>
                                <p>(2)Waiting for Resubmit</p>
                                <p>(3)Approved</p>
                                <p>(4)Rejected</p>
                            kycDoc:
                              type: integer
                              example: 1
                              description: |
                                <p>(0)Unknown</p>
                                <p>(1)Passport</p>
                                <p>(2)ID Card</p>
                            images:
                              type: array
                              items:
                                type: object
                                properties:
                                  userKYCId:
                                    type: integer
                                    example: 1
                                    description: Primary Key - user_kyc_status.id, foreign key'
                                  docType:
                                    type: integer
                                    example: 1
                                    description: |
                                      <p><b>Indicates what image type this record represents</b></p>
                                      <p>(0) Unknown</p>
                                      <p>(1) Passport</p>
                                      <p>(2) Id Front</p> 
                                      <p>(3) Id Back</p>
                                      <p>(4) Selfie</p>
                                  imageSeq:
                                    type: integer
                                    example: 1
                                    description: "Indicates how many times this image had been submited, for 1st submit, this imageSeq would be 1"
                                  status:
                                    type: integer
                                    example: 0
                                    description: |
                                      <p><b>Indicates what image status this record represents</b></p>
                                      <p>(0) Received</p>
                                      <p>(1) Uploaded</p>
                                      <p>(2) Waiting for resubmit</p> 
                                      <p>(3) Approved</p>
                                      <p>(4) Voided</p>
                                  imagePath:
                                    type: string
                                    example: "abcdefg/asdjslj/sfakljflkasf.jpeg"
                                    description: Image path that is get from S3
                                  createdDate:
                                    type: string
                                    format: date-time
                                    example: "2020-04-02"
                                    description: Created date
                                  lastModifiedDate:
                                    type: string
                                    format: date-time
                                    example: "2020-04-02"
                                    description: Last Modified Date
                                  rejectReason:
                                    type: string
                                    example: Unclear resolution
                                    description: Reject reason entered by CS Admin
                                  operatorId:
                                    type: string
                                    example: "dalek"
                                    description: The CS Admin's username


   #### [User]->[KYC] ####
  #### [KYC] -> Internal -> Receive from  [User] ####
  /kyc/user/getKYCCountryList:
    get:
      security:
        - Bearer_JWT_Service: []
      tags:
        - kyc
      summary: "[KYC] INTERNAL USED ONLY. Get country code list for kyc verification"
      operationId: /kyc/user/getKYCCountryList
      responses:
        200:
          description: successful operation
          content:
            "application/json":
              schema:
                allOf:
                  - $ref: "#/components/schemas/GeneralResponse"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          type: object
                          properties:
                            code:
                              type: string
                              example: AF
                              description: Primary Key - 'Two-letter country code (ISO 3166-1 alpha-2)'
                            name:
                              type: string
                              example: Afghanistan
                              description: English country name
                            fullName:
                              type: string
                              example: Islamic Republic of Afghanistan
                              description: Full English country name
                            iso3:
                              type: string
                              example: AFG
                              description: Three-letter country code (ISO 3166-1 alpha-3)
                            number:
                              type: string
                              example: "004"
                              description: Three-digit country number (ISO 3166-1 numeric)
                            continentCode:
                              type: string
                              example: AS
                              description: Which dontinent this country in
  /kyc/user/createKYCStatus:
    post:
      security:
        - Bearer_JWT_Service: []
      tags:
        - kyc
      summary: "[KYC] INTERNAL USED ONLY. Create record of user_kyc_status"
      operationId: /kyc/user/createKYCStatus
      requestBody:
        content:
          "application/json":
            schema:
              allOf:
                - $ref: "#/components/schemas/GeneralRequest"
                - type: object
                  description: Any one of
                  properties:
                    kycCountryCode:
                      type: string
                      example: AF
                      description: Country code in table [kyc_country_codes]
                    kycDoc:
                      type: integer
                      example: 1
                      description: |
                        <p>(0)Unknown</p>
                        <p>(1)Passport</p>
                        <p>(2)ID Card</p>
                    userId:
                      type: integer
                      example: 433
                      description:  "[Users].[id], represent the creater of this kyc status"
        required: true
      responses:
        200:
          description: successful operation
          content:
            "application/json":
              schema:
                allOf:
                  - $ref: "#/components/schemas/GeneralResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          id:
                            type: integer
                            example: 1
                            description: Primary Key - table [user_kyc_status] id
  /kyc/user/submitKYCApproval:
    post:
      security:
        - Bearer_JWT_Service: []
      tags:
        - kyc
      summary: "[KYC] INTERNAL USED ONLY, submit KYC approval"
      operationId: /kyc/user/submitKYCApproval
      requestBody:
        content:
          "application/json":
            schema:
              allOf:
                - $ref: "#/components/schemas/GeneralRequest"
                - type: object
                  description: Any one of
                  properties:
                    id:
                      type: integer
                      example: 142
                      description: user_kyc_status.id
        required: true
      responses:
        200:
          description: successful operation
          content:
            "application/json":
              schema:
                allOf:
                  - $ref: "#/components/schemas/GeneralResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        example: null
  /kyc/user/userKYCStatus/{userId}:
    get:
      security:
        - Bearer_JWT_ServiceToken: []
      tags:
        - kyc
      summary: "[KYC] INTERNAL USED ONLY. Get KYC status of a specific user"
      description: "Table user_kyc_statuses will eager load data in table kyc_user_images with the max imageSeq"
      operationId: /kyc/user/userKYCStatus/{userId}
      requestBody:
        content:
          "application/json":
            schema:
              allOf:
                - $ref: "#/components/schemas/GeneralRequest"
                - type: object
                  description: Any one of
                  properties:
                    userId:
                      type: integer
                      example: 1
                      description: "[Users].[id], /user/kyc/userKYCStatus/{userId} should send along this userId by decrypting login token"
        required: true
      responses:
        200:
          description: successful operation
          content:
            "application/json":
              schema:
                allOf:
                  - $ref: "#/components/schemas/GeneralResponse"
                  - type: object
                    properties:
                      kycLevel:
                        type: integer
                        example: 0
                        description: User' s KYC Level
                      data:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: integer
                              example: 1
                              description: Primary Key - user_kyc_status.id'
                            userId:
                              type: integer
                              example: 1
                              description:  "[Users].[id], represent the owner of this kyc status"
                            kycLevel:
                              type: integer
                              example: 1
                              description: Means what kyc level this status represents
                            approvalDate:
                              type: string
                              format: date-time
                              example: "2020-02-02"
                              description: Approval Date, null if not approved
                            operatorId:
                              type: integer
                              example: "admin"
                              description: The CS Admin's username
                            kycRetryCount:
                              type: string
                              example: 1
                              description: How many times this kyc status has been submitted
                            kycCountryCode:
                              type: string
                              example: AF
                              description: Country code in table [kyc_country_codes]
                            createdDate:
                              type: string
                              format: date-time
                              example: "2020-04-02"
                              description: Create date
                            lastModifiedDate:
                              type: string
                              format: date-time
                              example: "2020-04-02"
                              description: Last modified date
                            kycStatus:
                              type: integer
                              example: 0
                              description: |
                                <p>(0)Pending</p>
                                <p>(1)Waiting For Approval</p>
                                <p>(2)Waiting for Resubmit</p>
                                <p>(3)Approved</p>
                                <p>(4)Rejected</p>
                            kycDoc:
                              type: integer
                              example: 0
                              description: |
                               <p>(0)Unknown</p>
                               <p>(1)Passport</p>
                               <p>(2)ID Card</p>
                            images:
                              type: array
                              items:
                                type: object
                                properties:
                                  userKYCId:
                                    type: integer
                                    example: 1
                                    description: Primary Key - user_kyc_status.id, foreign key'
                                  docType:
                                    type: integer
                                    example: 0
                                    description: |
                                      <p><b>Indicates what image type this record represents</b></p>
                                      <p>(0) Unknown</p>
                                      <p>(1) Passport</p>
                                      <p>(2) Id Front</p> 
                                      <p>(3) Id Back</p>
                                      <p>(4) Selfie</p>
                                  imageSeq:
                                    type: integer
                                    example: 1
                                    description: "Indicates how many time this image had been submited, for 1st submit, this imageSeq would be 1"
                                  status:
                                    type: integer
                                    example: 0
                                    description: |
                                      <p><b>Indicates what image status this record represents</b></p>
                                      <p>(0) Received</p>
                                      <p>(1) Uploaded</p>
                                      <p>(2) Waiting for resubmit</p> 
                                      <p>(3) Approved</p>
                                      <p>(4) Voided</p>
                                  imagePath:
                                    type: string
                                    example: "abcdefg/asdjslj/sfakljflkasf.jpeg"
                                    description: Image path that is get from S3
                                  createdDate:
                                    type: string
                                    format: date-time
                                    example: "2020-04-02"
                                    description: Create date
                                  lastModifiedDate:
                                    type: string
                                    format: date-time
                                    example: "2020-04-02"
                                    description: Last modified date
                                  rejectReason:
                                    type: string
                                    example: Unclear resolution
                                    description: Reject reason entered by CS Admin
                                  operatorId:
                                    type: string
                                    example: "dalek"
                                    description: The CS Admin's username

 #### [KYC][Admin]
  /kyc/admin/login:
    post:
      tags:
        - kyc
      summary: "[KYC][Admin] Login API for admin user"
      operationId: /kyc/admin/login
      requestBody:
        content:
          "application/json":
            schema:
              allOf:
                - $ref: "#/components/schemas/GeneralRequest"
                - type: object
                  properties:
                    username:
                      type: string
                      description: Admin username
                    password:
                      type: string
                      format: password
                      description: password
                  required:
                    - username
                    - password
      responses:
        200:
          description: successful operation
          content:
            "application/json":
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/GeneralResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          token:
                            type: string
                            description: Login token
                          expiredTime:
                            type: string
                            format: date-time
                            description: Token expiry timestamp
                          lastModifiedDate:
                            type: string
                            format: date-time
                            description: Last modified date
                          createdDate:
                            type: string
                            format: date-time
                            description: Create date
                          type:
                            type: integer
                            description: "?"  
  /kyc/admin/userKYCStatus/{userId}:
    get:
      security:
        - Bearer_JWT_LoginToken: []
      tags:
        - kyc
      summary: "[KYC][Admin] Get KYC status of a specific user"
      description: "Table user_kyc_statuses will eager load data in table kyc_user_images with the max imageSeq"
      operationId: /kyc/admin/userKYCStatus/{userId}
      requestBody:
        content:
          "application/json":
            schema:
              allOf:
                - $ref: "#/components/schemas/GeneralRequest"
                - type: object
                  description: Any one of
                  properties:
                    userId:
                      type: integer
                      example: 1
                      description: "[Users].[id], /user/kyc/userKYCStatus/{userId} should send along this userId by decrypting login token"
        required: true
      responses:
        200:
          description: successful operation
          content:
            "application/json":
              schema:
                allOf:
                  - $ref: "#/components/schemas/GeneralResponse"
                  - type: object
                    properties:
                      kycLevel:
                        type: integer
                        example: 0
                        description: User' s KYC Level
                      data:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: integer
                              example: 1
                              description: Primary Key - user_kyc_status.id'
                            userId:
                              type: integer
                              example: 1
                              description:  "[Users].[id], represent the owner of this kyc status"
                            kycLevel:
                              type: integer
                              example: 1
                              description: Means what kyc level this status represents
                            approvalDate:
                              type: string
                              format: date-time
                              example: "2020-02-02"
                              description: Approval Date, null if not approved
                            operatorId:
                              type: integer
                              example: "admin"
                              description: The CS Admin's username
                            kycRetryCount:
                              type: string
                              example: 1
                              description: How many times this kyc status has been submitted
                            kycCountryCode:
                              type: string
                              example: AF
                              description: Country code in table [kyc_country_codes]
                            createdDate:
                              type: string
                              format: date-time
                              example: "2020-04-02"
                              description: Create date
                            lastModifiedDate:
                              type: string
                              format: date-time
                              example: "2020-04-02"
                              description: Last modified date
                            kycStatus:
                              type: integer
                              example: 0
                              description: |
                                <p>(0)Pending</p>
                                <p>(1)Waiting For Approval</p>
                                <p>(2)Waiting for Resubmit</p>
                                <p>(3)Approved</p>
                                <p>(4)Rejected</p>
                            kycDoc:
                              type: integer
                              example: 0
                              description: |
                               <p>(0)Unknown</p>
                               <p>(1)Passport</p>
                               <p>(2)ID Card</p>
                            images:
                              type: array
                              items:
                                type: object
                                properties:
                                  userKYCId:
                                    type: integer
                                    example: 1
                                    description: Primary Key - user_kyc_status.id, foreign key'
                                  docType:
                                    type: integer
                                    example: 0
                                    description: |
                                      <p><b>Indicates what image type this record represents</b></p>
                                      <p>(0) Unknown</p>
                                      <p>(1) Passport</p>
                                      <p>(2) Id Front</p> 
                                      <p>(3) Id Back</p>
                                      <p>(4) Selfie</p>
                                  imageSeq:
                                    type: integer
                                    example: 1
                                    description: "Indicates how many time this image had been submited, for 1st submit, this imageSeq would be 1"
                                  status:
                                    type: integer
                                    example: 0
                                    description: |
                                      <p><b>Indicates what image status this record represents</b></p>
                                      <p>(0) Received</p>
                                      <p>(1) Uploaded</p>
                                      <p>(2) Waiting for resubmit</p> 
                                      <p>(3) Approved</p>
                                      <p>(4) Voided</p>
                                  imagePath:
                                    type: string
                                    example: "abcdefg/asdjslj/sfakljflkasf.jpeg"
                                    description: Image path that is get from S3
                                  createdDate:
                                    type: string
                                    format: date-time
                                    example: "2020-04-02"
                                    description: Create date
                                  lastModifiedDate:
                                    type: string
                                    format: date-time
                                    example: "2020-04-02"
                                    description: Last modified date
                                  rejectReason:
                                    type: string
                                    example: Unclear resolution
                                    description: Reject reason entered by CS Admin
                                  operatorId:
                                    type: string
                                    example: "dalek"
                                    description: The CS Admin's username
  /kyc/admin/refreshToken:
    post:
      security:
        - Bearer_JWT_LoginToken: []
      tags:
        - kyc
      summary: "[KYC][Admin] Extend Login token expiry time if the token is not expired"
      operationId: refershToken
      requestBody:
        content:
          "application/json":
            schema:
              allOf:
                - $ref: "#/components/schemas/GeneralRequest"
      responses:
        200:
          description: successful operation
          content:
            "application/json":
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/GeneralResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          token:
                            type: string
                            description: Login token
                          expiryTime:
                            type: string
                            format: date-time
                            description: Token expiry time
  /kyc/admin/userKYCStatus?page=1&page_size=10&status=1:
    get:
      security:
        - Bearer_JWT_LoginToken: []
      tags:
        - kyc
      summary: "[KYC][Admin] Get the KYC status list based on page number and page size"
      description : "order by latest last modified date, can be filtered by status"
      operationId: /kyc/admin/getKYCStatusList?page=1&page_size=10
      requestBody:
        content:
          "application/json":
            schema:
              allOf:
                - $ref: "#/components/schemas/GeneralRequest"
                - type: object
                  properties:
                    kycStatus:
                      type: integer
                      description: | 
                          <p><b>Optional</b></p>
                          <p>(0)Pending</p>
                          <p>(1)Waiting For Approval</p>
                          <p>(2)Waiting for Resubmit</p>
                          <p>(3)Approved</p>
                          <p>(4)Rejected</p>
      responses:
        200:
          description: successful operation
          content:
            "application/json":
              schema:
                allOf:
                  - $ref: "#/components/schemas/GeneralResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          totalRows:
                            type: integer
                            example: 12
                            description: Total records of user kyc status in db
                          data:
                            type: array
                            items:
                              type: object
                              properties:
                                id:
                                  type: integer
                                  example: 1
                                  description: Primary Key - user_kyc_status.id'
                                userId:
                                  type: integer
                                  example: 1
                                  description: "[Users].[id], represent the owner of this kyc status"
                                kycLevel:
                                  type: integer
                                  example: 1
                                  description: Means what kyc level this status represents
                                approvalDate:
                                  type: string
                                  format: date-time
                                  example: "2020-02-02"
                                  description: Approval Date, null if not approved
                                operatorId:
                                  type: integer
                                  example: 1
                                  description: The CS Admin's username
                                kycRetryCount:
                                  type: string
                                  example: 1
                                  description: How many times this kyc status has been submitted
                                kycCountryCode:
                                  type: string
                                  example: AF
                                  description: Country code in table [kyc_country_codes]
                                createdDate:
                                  type: string
                                  format: date-time
                                  example: "2020-04-02"
                                  description: Create date
                                lastModifiedDate:
                                  type: string
                                  format: date-time
                                  example: "2020-04-02"
                                  description: Last modified date
                                kycStatus:
                                  type: integer
                                  example: 0
                                  description: 
                                    <p>(0)Pending</p>
                                    <p>(1)Waiting For Approval</p>
                                    <p>(2)Waiting for Resubmit</p>
                                    <p>(3)Approved</p>
                                    <p>(4)Rejected</p>
                                kycDoc:
                                  type: integer
                                  example: 0
                                  description: |
                                    <p>(0)Unknown</p>
                                    <p>(1)Passport</p>
                                    <p>(2)ID Card</p>
                                walletAddress:
                                  type: string
                                  example: "ABCDEFG"
                                  description: Wallet Address of user         
                                email:
                                  type: string
                                  example: "ABCDEFG@gmail.com"
                                  description: Email of user  
  /kyc/admin/updateKYCStatus:
    post:
      security:
        - Bearer_JWT_LoginToken: []
      tags:
        - kyc
      summary: "[KYC][Admin] CS Admin to approve or reject KYC Status"
      description: "Request body should only include those updated kyc status and kyc images,
      status should be either 2(WaitingForResubmit) or 3(Approved). 
      If any one of the images is rejected, the status of user_kyc_status will change to 2(WaitingForResubmit).
      If all images are approved, the status of user_kyc_status will change to 3(Approved)
      Please notice that reqBody.kycStatus and all status of reqBody.images should be changed already in request body"
      operationId: /kyc/admin/updateKYCStatus
      requestBody:
        content:
          "application/json":
            schema:
              allOf:
                - $ref: "#/components/schemas/GeneralRequest"
                - type: object
                  properties:
                            id:
                              type: integer
                              example: 1
                              description: Primary Key - user_kyc_status.id'
                            kycStatus:
                              type: integer
                              example: 2
                              description: 
                                <p><b>Either</b></p>
                                <p>(2)Waiting for Resubmit - <b>When any image is rejected by CS Admin</b></p> 
                                <p>(3)Approved - <b>When all images are approved by CS Admin</b></p>
                            images:
                              type: array
                              items:
                                type: object
                                properties:
                                  userKYCId:
                                    type: integer
                                    example: 1
                                    description: user_kyc_status.id
                                  docType:
                                    type: integer
                                    example: 1
                                    description: |
                                      <p><b>Indicates what image type this record represents</b></p>
                                      <p>(0) Unknown</p>
                                      <p>(1) Passport</p>
                                      <p>(2) Id Front</p> 
                                      <p>(3) Id Back</p>
                                      <p>(4) Selfie</p>
                                  status:
                                    type: integer
                                    example: 2
                                    description: |
                                      <p><b>When send to this API, it should be either</b></p>
                                      <p>(2) Waiting For Resubmit</p>  
                                      <p>(3) Approved</p> 
                                      <p><b>Other status should not be considered to be updated</b></p>
                                  imageSeq:
                                    type: integer
                                    example: 1
                                    description: "Indicates how many times this image had been submited, for 1st submit, this imageSeq would be 1"
                                  rejectReason:
                                    type: string
                                    example: Unclear resolution
                                    description: Reject reason entered by CS Admin
        required: true
      responses:
        200:
          description: successful operation
          content:
            "application/json":
              schema:
                allOf:
                  - $ref: "#/components/schemas/GeneralResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        example: null
  /kyc/admin/resetKYCStatus:
    post:
      security:
        - Bearer_JWT_LoginToken: []
      tags:
        - kyc
      summary: "[KYC][Admin] Reset user_kyc_statuses to (kycStatus=0, kycRetryCount=0, operatorId= CS Admin' s username) based on reqBody.id"
      operationId: /kyc/admin/resetKYCStatus
      requestBody:
        content:
          "application/json":
            schema:
              allOf:
                - $ref: "#/components/schemas/GeneralRequest"
                - type: object
                  description: Any one of
                  properties:
                    id:
                      type: integer
                      example: 142
                      description: user_kyc_status.id
        required: true
      responses:
        200:
          description: successful operation
          content:
            "application/json":
              schema:
                allOf:
                  - $ref: "#/components/schemas/GeneralResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        example: null
  /kyc/admin/createAdminUser:
    post:
      security:
        - Bearer_JWT_LoginToken: []
      tags:
        - kyc
      summary: "[KYC][Admin] Create admin user"
      description: "Need to have token that is generated from kyc kyc/admin/login "
      operationId: /kyc/admin/createAdminUser
      requestBody:
        content:
          "application/json":
            schema:
              allOf:
                - $ref: "#/components/schemas/GeneralRequest"
                - type: object
                  properties:
                    username:
                      type: string
                      description: username
                    password:
                      type: string
                      format: password
                      description: password
                  required:
                    - username
                    - password
      responses:
        200:
          description: successful operation
          content:
            "application/json":
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/GeneralResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          username:
                            type: string
                            example: hello
                            description: Login token
  /kyc/admin/changeAdminPassword:
    post:
      security:
        - Bearer_JWT_LoginToken: []
      tags:
        - kyc
      summary: "[KYC][Admin] Change admin user password"
      description: "Requset header need to include token that is generated from kyc/admin/login. New Password and old password should all send from request body"
      operationId: /kyc/admin/changeAdminPassword
      requestBody:
        content:
          "application/json":
            schema:
              allOf:
                - $ref: "#/components/schemas/GeneralRequest"
                - type: object
                  properties:
                    username:
                      type: string
                      description: username
                    password:
                      type: string
                      format: password
                      description: old password
                    newPassword:
                      type: string
                      format: password
                      description: new password
                  required:
                    - username
                    - password
                    - newPassword
      responses:
        200:
          description: successful operation
          content:
            "application/json":
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/GeneralResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          username:
                            type: string
                            example: hello
                            description: Login token

#######################################   KYC   ############################################

  /sweep/all:
    parameters:
      - in: header
        name: Authorization
        description: Login Token
        example: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJFdXJ1c0F1dGgiLCJuYmYiOjE2MjgyMzEzODcsImNsaWVudEluZm8iOiJ7XCJDbGllbnRJbmZvXCI6XCJ7XFxcInNlcnZpY2VJZFxcXCI6IDEzMCwgXFxcInNlc3Npb25JZFxcXCI6Nn1cIixcIlNlcnZpY2VJZFwiOjB9In0.Z6b-_hQ_I5ZT6qH4YunjXFsMjEKxMix7Nfsl7gkOKPc
        schema:
          type: string
        required: true
    post:
      tags:
        - sweep
      summary: "Trigger full-account scan to find wallets which needed to be swept"
      description: "Sweep tokens of centralized account"
      operationId: /sweep/all
      responses:
        204:
          description: Received sweep checking request, actual action will be done

components:
  schemas:
    GeneralRequest:
      type: object
      properties:
        nonce:
          type: string
          format: uuid
          description: Request nonce
      required:
        - nonce

    GeneralResponse:
      type: object
      properties:
        nonce:
          type: string
          format: uuid
          description: Request nonce
        returnCode:
          type: integer
          description: Server return code - Reference to ServerReturnCode
        message:
          type: string
          description: Server returns message
        data:
          type: object
          description: Resquest specific response
    AddCurrencyRequest:
      type: object
      properties:
        nonce:
          type: string
          format: uuid
          description: Mandatory field
        asset:
          type: string
          description: Mandatory field
        address:
          type: string
          description: Mandatory field
        decimal:
          type: string
          description: Mandatory field
    GetCurrencyAddressRequest:
      type: object
      properties:
        nonce:
          type: string
          format: uuid
          description: Mandatory field
        asset:
          type: string
          description: Mandatory field
    GetCurrencyAddressResponse:
      type: object
      properties:
        nonce:
          type: string
          format: uuid
          description: Mandatory field
        address:
          type: string
          description: Mandatory field
    GetAddressResponse:
      type: object
      properties:
        address:
          type: string
          description: Mandatory field
    SetWalletAddressRequest:
      type: object
      properties:
        nonce:
          type: string
          format: uuid
          description: Mandatory field
        address:
          type: string
          description: Mandatory field
    SetWithdrawFeeRequest:
      type: object
      properties:
        value:
          type: string
          description: Mandatory field(Amount)
    SCTransactionResponse:
      type: object
      properties:
        txHash:
          type: string
          format: uuid
    ServerSetting:
      type: object
      properties:
        ip:
          type: string
        port:
          type: integer
        path:
          type: string
    ConfigRequest:
      type: object
      properties:
        nonce:
          type: string
          format: uuid
          description: Mandatory field
        id:
          type: integer
          format: int32
          description: Mandatory field
        key:
          type: string
    DelConfig:
      type: object
      properties:
        nonce:
          type: string
          format: uuid
          description: Mandatory field
        id:
          type: integer
          format: int32
          description: Mandatory field
        key:
          type: string
          description: Mandatory field
    AddConfig:
      type: object
      properties:
        nonce:
          type: string
          format: uuid
          description: Mandatory field
        id:
          type: integer
          format: int32
          description: Mandatory field
        key:
          type: string
          description: Mandatory field
        value:
          type: string
          description: Mandatory field
        is_service:
          type: boolean
          description: Mandatory field
          default: false
    Config:
      type: object
      properties:
        id:
          type: integer
          format: int32
        key:
          type: string
        value:
          type: string
    ConfigDelete:
      type: object
      properties:
        nonce:
          type: string
          format: uuid
          description: Mandatory field
        id:
          type: integer
          format: int32
          description: Mandatory field
        key:
          type: string
          description: Mandatory field
    SystemConfig:
      type: object
      properties:
        ownerId:
          type: integer
          format: int64
          description: Either the ServiceID or GroupID who owns this config
        isService:
          type: boolean
          description: Determine if this config is owned by single service or service group
        key:
          type: string
          description: Key of the configuration, this is unique in system
        value:
          type: string
          description: Value of the configuration
    SystemConfigWithUpdateStatus:
      type: object
      properties:
        ownerId:
          type: integer
          format: int64
          description: Either the ServiceID or GroupID who owns this config
        isService:
          type: boolean
          description: Determine if this config is owned by single service or service group
        key:
          type: string
          description: Key of the configuration, this is unique in system
        value:
          type: string
          description: Value of the configuration
        isNewConfig:
          type: boolean
          description: True means the request result in adding a new config, otherwise update the value
    AssetSetting:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Row id of this setting in database, internal use only
        assetName:
          type: string
          description: Name of the asset, note this is not the symbol of that asset
        kyc0MaxDailyWithdrawAmount:
          type: string
          nullable: true
          description: KYC 0 max daily withdraw amount, nullable max 78-digit number
        kyc1MaxDailyWithdrawAmount:
          type: string
          nullable: true
          description: KYC 1 max daily withdraw amount, nullable max 78-digit number
        kyc2MaxDailyWithdrawAmount:
          type: string
          nullable: true
          description: KYC 2 max daily withdraw amount, nullable max 78-digit number
        kyc3MaxDailyWithdrawAmount:
          type: string
          nullable: true
          description: KYC 3 max daily withdraw amount, nullable max 78-digit number
        sweepTriggerAmount:
          type: string
          description: Amount to trigger sweeping is needed, max 78-digit number
        isEnabled:
          type: boolean
          description: Whether this asset setting is enabled
    AddOrUpdateSystemConfigRequest:
      type: object
      properties:
        value:
          type: string
          description: Value of the configuration to be added or updated
    Auth:
      type: object
      properties:
        id:
          type: integer
          format: int64
        serviceName:
          type: string
        pubKey:
          type: string
    AuthRequest:
      type: object
      properties:
        id:
          type: integer
          format: int64
    AddAuth:
      type: object
      properties:
        nonce:
          type: string
          format: uuid
          description: Mandatory field
        serviceName:
          type: string
          description: Mandatory field
        pubKey:
          type: string
          description: Mandatory field
    UpdateAuth:
      type: object
      properties:
        nonce:
          type: string
          format: uuid
          description: Mandatory field
        id:
          type: integer
          format: int64
          description: Mandatory field
        serviceName:
          type: string
          description: Mandatory field
        pubKey:
          type: string
          description: Mandatory field
    SetBurnConfig:
      type: object
      properties:
        nonce:
          type: string
          format: uuid
          description: Mandatory field
        ethClientIP:
          type: string
          description: Mandatory field
        ethClientPort:
          type: integer
          description: Mandatory field
        name:
          type: string
          description: Mandatory field (server name)
        miscellaneousData:
          type: array
          items:
            $ref: '#/components/schemas/Config'
    SetMintConfig:
      type: object
      properties:
        nonce:
          type: string
          format: uuid
          description: Mandatory field
        ethClientIP:
          type: string
          description: Mandatory field
        ethClientPort:
          type: integer
          description: Mandatory field
        name:
          type: string
          description: Mandatory field (server name)
        miscellaneousData:
          type: array
          items:
            $ref: '#/components/schemas/Config'

    SetMintBurnConfigResponse:
      type: object
      properties:
        hdWalletPrivKey:
          type: string
          format: uuid
          description: Private Key to generate address in HDWallet
        hdWalletAddr:
          type: string
          format: uuid
          description: Address used to generate address in HDWallet
        rsaPubKey:
          type: string
          format: uuid
          description: RSA public key
        rsaPrivKey:
          type: string
          format: uuid
          description: RSA private key
