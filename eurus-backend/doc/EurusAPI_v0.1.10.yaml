openapi: 3.0.1
info:
  title: Eurus API Version 0.1.8
  description: Eurus API specification version 0.1.8
  termsOfService: http://swagger.io/terms/
  contact:
    email: placeholder@18m.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 0.1.7
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: https://ToBeConfirmed/
  - url: http://ToBeConfirmed/
tags:
  - name: user
    description: User related service
  - name: admin
    description: Admin management service
  - name: merchant
    description: Merchant admin management service

paths:
  /user/registerByEmail:
    post:
      tags:
        - user
      summary:
        Register a new user by email. System creates an user wallet and a corresponding
        private, public key
      operationId: registerByEmail
      requestBody:
        content:
          "application/json":
            schema:
              allOf:
                - $ref: "#/components/schemas/GeneralRequest"
                - type: object
                  properties:
                    timestamp:
                      type: integer
                      format: int32
                      description: Current unix timestamp
                    deviceId:
                      type: string
                      description: Device ID
                    email:
                      type: string
                      description: Unique login email for verification
                      format: email
                    loginAddress:
                      type: string
                      description: Login Address.
                      minimum: 3
                      maximum: 20
                    signature:
                      type: string
                      description: signature.
                    publicKey:
                      type: string
                      description: publicKey.                      
                      # description: Login password.
                      # minimum: 5
                      # maximum: 20
              required:
                - email
                - loginAddress
                - signature

        required: true
      responses:
        200:
          description: successful operation
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/GeneralResponse"
  
  /user/verification:
    post:
      tags:
        - user
      summary:
        verify user
      operationId: verification
      requestBody:
        content:
          "application/json":
            schema:
              allOf:
                - $ref: "#/components/schemas/GeneralRequest"
                - type: object
                  properties:
                    userId:
                      type: integer
                      format: int32
                      description: user id
                    code:
                      type: string
                      description: verification code
              required:
                - code
                - userId

        required: true
      responses:
        200:
          description: successful operation
          content:
            "application/json":
              schema:
                allOf:
                - $ref: "#/components/schemas/GeneralRequest"
                - type: object
                  properties:
                    userId:
                      type: integer
                      format: int32
                      description: user id
                    email:
                      type: string
                      format: string
                      description: user email
                    mnemonic:
                      type: string
                      description: encrypted mnemonic phrase
                    walletAddress:
                      type: string
                      description: wallet address


  /user/setupPaymentWallet:
    parameters:
      - in: header
        name: Authorization
        description: Login token
        schema:
          type: string
        required: true
    post:
      tags:
        - user
      summary:
        after user successfully verified, generate a owner wallet address call this endpoint
      operationId: verificationCallback
      requestBody:
        content:
          "application/json":
            schema:
              allOf:
                - $ref: "#/components/schemas/GeneralRequest"
                - type: object
                  properties:
                    userId:
                      type: integer
                      format: int32
                      description: user id
                    address:
                      type: string
                      description: owner wallet address
              required:
                - userId
                - address

        required: true
      responses:
        200:
          description: successful operation
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/GeneralResponse"

  /user/resendVerificationEmail:
    post:
      tags:
        - user
      summary:
        self explanatory
      operationId: resend
      requestBody:
        content:
          "application/json":
            schema:
              allOf:
                - $ref: "#/components/schemas/GeneralRequest"
                - type: object
                  properties:
                    userId:
                      type: integer
                      format: int32
                      description: user id
              required:
                - userId

        required: true
      responses:
        200:
          description: successful operation
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/GeneralResponse"

  /user/importWallet:
    post:
      tags:
        - user
      summary: Import an existing MetaMask or similar wallet into Eurus
      operationId: importWallet
      requestBody:
        description: List of user object
        content:
          "application/json":
            schema:
              allOf:
                - $ref: "#/components/schemas/GeneralRequest"
                - type: object
                  properties:
                    timestamp:
                      type: integer
                      format: int32
                      description: Current unix timestamp
                    walletAddress:
                      type: string
                      format: address
                      description: Wallet address to be imported
                    publicKey:
                      type: string
                      description: Wallet public key in hex string (little endian)
                    deviceId:
                      type: string
                      description: Device ID
                    sign:
                      type: string
                      format: hex
                      description: >
                        Signature in hex format. The signature is sign by Keccak256 hash a base string of key and value pairs x=y concaten by '&'; which consists of the following components in sequence:
                        * deviceId
                        * timestamp 
                        * walletAddress
              required:
                - deviceId
                - timestamp
                - walletAddress
                - publicKey
                - sign

        required: true
      responses:
        200:
          description: successful operation
          content:
            "application/json":
              schema:
                allOf:
                  - $ref: "#/components/schemas/GeneralResponse"
                  - type: object
                    properties:
                      token:
                        type: string
                        description: Login token
                      expiryTime:
                        type: string
                        format: date-time
                        description: Token expiry time
                      lastLoginTime:
                        type: string
                        format: date-time
                        description: Last login time
                      status:
                        type: integer
                        description: Account status

  /user/loginByPassword:
    post:
      tags:
        - user
      summary: User uses password to request login token
      operationId: loginByPassword
      requestBody:
        content:
          "application/json":
            schema:
              allOf:
                - $ref: "#/components/schemas/GeneralRequest"
                - type: object
                  properties:
                    username:
                      type: string
                      description: Login username
                    password:
                      type: string
                      description: Login password
                  required:
                    - username
                    - password
        required: true
      responses:
        200:
          description: successful operation
          content:
            "application/json":
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/GeneralResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          token:
                            type: string
                            description: Login token
                          expiryTime:
                            type: string
                            format: date-time
                            description: Token expiry time
                          lastLoginTime:
                            type: string
                            format: date-time
                            description: Last login time
                          status:
                            type: integer
                            description: Account status

  /user/loginBySignature:
    post:
      tags:
        - user
      summary: For MetaMask user to login system by sign a request by user owned private key
      operationId: loginBySignature
      requestBody:
        content:
          "application/json":
            schema:
              allOf:
                - $ref: "#/components/schemas/GeneralRequest"
                - type: object
                  properties:
                    timestamp:
                      type: integer
                      format: int32
                      description: Current unix timestamp
                    walletAddress:
                      type: string
                      format: address
                      description: Wallet address
                    publicKey:
                      type: string
                      format: string
                      description: ECDSA public key in hex string (little endian)
                    deviceId:
                      type: string
                      description: Device ID
                    sign:
                      type: string
                      format: hex string
                      description: >
                        Signature in hex format. The signature is sign by Keccak256 hash a base string of key and value pairs x=y concaten by '&'; which consists of the following components in sequence:
                          * deviceId
                          * timestamp 
                          * walletAddress

                  required:
                    - deviceId
                    - timestamp
                    - walletAddress
                    - publicKey
                    - sign
      responses:
        200:
          description: successful operation
          content:
            "application/json":
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/GeneralResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          token:
                            type: string
                            description: Login token
                          expiryTime:
                            type: string
                            format: date-time
                            description: Token expiry time
                          lastLoginTime:
                            type: string
                            format: date-time
                            description: Last login time
                          status:
                            type: integer
                            description: Account status

  /user/refreshToken:
    parameters:
      - in: header
        name: Authorization
        description: Login token
        schema:
          type: string
        required: true
    post:
      tags:
        - user
      summary: Extend Login token expiry time if the token is not expired
      operationId: refershToken
      requestBody:
        content:
          "application/json":
            schema:
              allOf:
                - $ref: "#/components/schemas/GeneralRequest"
      responses:
        200:
          description: successful operation
          content:
            "application/json":
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/GeneralResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          token:
                            type: string
                            description: Login token
                          expiryTime:
                            type: string
                            format: date-time
                            description: Token expiry time

  /user/clientVersion:
    get:
      tags:
        - user
      summary: Get the latest client version
      operationId: clientVersion

      responses:
        200:
          description: successful operation
          content:
            "application/json":
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/GeneralResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        items:
                          properties:
                            iPhoneMinimumVersion:
                              type: string
                              description: iPhone minimum supported version

                            androidMinimumVersion:
                              type: string
                              description: Android minimum version number

  /user/serverConfig:
    get:
      tags:
        - user
      summary: Get the system server config
      operationId: serverConfig
      responses:
        200:
          description: successful operation
          content:
            "application/json":
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/GeneralResponse"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          properties:
                            nodeDomain:
                              type: string
                              format: hostname
                              description: Blockchain node domain name
                            nodePort:
                              type: integer
                              format: int32
                              description: Blockchain node port
                            smartContractAddress:
                              type: string
                              format: address
                              description: Dictionary smart contract address
  /user/details:
    parameters:
      - in: header
        name: Authorization
        description: Login token
        schema:
          type: string
        required: true
    get:
      tags:
        - user
      responses:
        200:
          description: successful operation
          content:
            "application/json":
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/GeneralResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          username:
                            type: string
                            description: User name
                          email:
                            type: string
                            format: email
                            description: Email
                          isMetaMask:
                            type: boolean
                            description: Is MetaMask account
                          kycStatus:
                            type: integer
                            description: KYC status
                          wallet_address:
                            type: string
                            format: address
                            description: Eurus wallet address
                          mainnet_wallet_address:
                            type: string
                            format: address
                            description: Mainnet wallet address
                          status:
                            type: integer
                            description: Account status
                        required:
                          - username
                          - email
                          - isMetaMask

  /user/friend:
    parameters:
      - in: header
        name: Authorization
        description: Login token
        schema:
          type: string
        required: true
    post:
      tags:
        - user
      summary: Add friend
      operationId: addFriend
      requestBody:
        content:
          "application/json":
            schema:
              allOf:
                - $ref: "#/components/schemas/GeneralRequest"
                - type: object
                  description: Any one of
                  properties:
                    email:
                      type: string
                      description: friend email
                    username:
                      type: string
                      description: friend username
                    walletAddress:
                      type: string
                      format: address
                      description: friend wallet address
      responses:
        200:
          description: successful operation
          content:
            "application/json":
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/GeneralResponse"
    get:
      tags:
        - user
      summary: Get friend list
      responses:
        200:
          description: successful operation
          content:
            "application/json":
              schema:
                allOf:
                  - $ref: "#/components/schemas/GeneralResponse"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          type: object
                          properties:
                            walletAddress:
                              type: string
                              description: Friend wallet address
                            username:
                              type: string
                              description: Friend username (maybe empty)
                            email:
                              type: string
                              format: email
                              description: Friend email
                            nickName:
                              type: string
                              description: Nick name
  /user/friend/{walletAddress}:
    parameters:
      - in: header
        name: Authorization
        description: Login token
        schema:
          type: string
        required: true
      - in: path
        name: walletAddress
        description: Friend wallet address
        schema:
          type: string
        required: true
    put:
      tags:
        - user
      summary: Update friend nick name
      requestBody:
        content:
          "application/json":
            schema:
              allOf:
                - $ref: "#/components/schemas/GeneralRequest"
                - type: object
                  properties:
                    nickName:
                      type: string
                      description: Friend nick name
                  required:
                    - nickName
      responses:
        200:
          description: successful operation
          content:
            "application/json":
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/GeneralResponse"
    delete:
      tags:
        - user
      summary: Delete a friend
      requestBody:
        content:
          "application/json":
            schema:
              allOf:
                - $ref: "#/components/schemas/GeneralRequest"
      responses:
        200:
          description: successful operation
          content:
            "application/json":
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/GeneralResponse"

  /user/changeLoginPassword:
    parameters:
      - in: header
        name: Authorization
        description: Login token
        schema:
          type: string
        required: true
    post:
      tags:
        - user
      summary: Change login password
      requestBody:
        content:
          "application/json":
            schema:
              allOf:
                - $ref: "#/components/schemas/GeneralRequest"
                - type: object
                  properties:
                    loginAddress:
                      type: string
                    # oldPassword:
                    #   type: string
                    #   format: password
                    #   description: Current password
                    # newPassword:
                    #   type: string
                    #   format: password
                    #   description: New password
                  required:
                  #   - oldPassword
                  #   - newPassword
                    - loginAddress
      responses:
        200:
          description: successful operation
          content:
            "application/json":
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/GeneralResponse"

  /user/changePaymentPassword:
    parameters:
      - in: header
        name: Authorization
        description: Login token
        schema:
          type: string
        required: true
    post:
      tags:
        - user
      summary: Change payment password
      requestBody:
        content:
          "application/json":
            schema:
              allOf:
                - $ref: "#/components/schemas/GeneralRequest"
                - type: object
                  properties:
                    onwerWalletAddress:
                      type: string
                    # oldPassword:
                    #   type: string
                    #   format: password
                    #   description: Current password
                    # newPassword:
                    #   type: string
                    #   format: password
                    #   description: New password
                  required:
                   - onwerWalletAddress
                    # - oldPassword
                    # - newPassword
      responses:
        200:
          description: successful operation
          content:
            "application/json":
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/GeneralResponse"
  /user/registerDevice:
    post:
      tags:
        - user
      summary: Register a device for an user
      operationId: registerDevice
      requestBody:
        content:
          "application/json":
            schema:
              allOf:
                - $ref: "#/components/schemas/GeneralRequest"
                - type: object
                  properties:
                    deviceId:
                      type: string
                      description: Device ID
                    enableBioMetric:
                      type: boolean
                      description: Enable biometric verification
                  required:
                    - deviceId
      responses:
        200:
          description: successful operation
          content:
            "application/json":
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/GeneralResponse"
  /user/recentTransaction:
    parameters:
      - in: header
        name: Authorization
        description: Login token
        schema:
          type: string
        required: true
    post:
      tags:
        - user
      summary: lastest user transaction records for last n days
      operationId: recentTransaction
      requestBody:
        content:
          "application/json":
            schema:
              allOf:
                - $ref: "#/components/schemas/GeneralRequest"
                - type: object
                  properties:
                    currencySymbol:
                      type: string

      responses:
        200:
          description: successful operation
          content:
            "application/json":
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/GeneralResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          decimal:
                            type: integer
                            format: int32
                            description: Amount decimal point
                          transList:
                            type: array
                            items:
                              anyOf:
                                - type: object
                                  properties:
                                    transType:
                                      type: integer
                                      format: int32
                                      description: transaction type (1 => transfer)
                                    transDate:
                                      type: integer
                                      format: int64
                                      description: transaction date time in UNIX timestamp
                                    txHash:
                                      type: string
                                      description: transaction hash
                                    status:
                                      type: boolean
                                      description: transaction status (0->failed; 1->success)
                                    remarks:
                                      type: string
                                      description: error message if the transaction is failed
                                - type: object
                                  properties:
                                    transType:
                                      type: integer
                                      format: int32
                                      description: transaction type (2 => deposit)
                                    amount:
                                      type: integer
                                      format: int64
                                      description: Deposit amount
                                    status:
                                      type: integer
                                      format: int32
                                      description: Deposit status
                                        DepositError = - (status),
                                        DepositReceiptCollected = 10,
                                        DepositAssetCollected = 20,
                                        DepositMintConfirming = 30,
                                        DepositCompleted = 40,
                                    fromAddress:
                                      type: string
                                      format: address
                                      description: Deposit source address
                                    toAddress:
                                      type: string
                                      format: address
                                      description: to address at mainnet
                                    destAddress:
                                      type: string
                                      format: address
                                      description: target address at sidechain
                                    chainLocation:
                                      type: integer
                                      format: int32
                                      description: chain location for the txHash ( 1 - sidechain , 2 - mainnet)
                                    txHash:
                                      type: string
                                      description: Transaction hash
                                    mintTransId:
                                      type: integer
                                      format: int64
                                      description: Mint transId (Optional) only exist at state 2, 3
                                    remarks:
                                      type: string
                                      description: Error description (Optional) only exists at state -1
                                    transDate:
                                      type: integer
                                      format: int64
                                      description: trans date
                                    depositTxHash:
                                      type: string
                                      description: Identifier of deposit transaction
                                - type: object
                                  properties:
                                    transType:
                                      type: integer
                                      format: int32
                                      description: transaction type (3 => withdraw)
                                    status:
                                      type: integer
                                      format: int32
                                      description: Withdraw status
                                        StatusError WithdrawStatus =  - (status)
                                        StatusPendingApproval = 10
                                        StatusApproved = 20
                                        StatusRejected = 30
                                        StatusBurnConfirming = 40
                                        StatusBurned = 50
                                        StatusCompleted = 60
                                    fromAddress:
                                      type: string
                                      format: address
                                      description: Side chain source address
                                    toAddress:
                                      type: string
                                      format: address
                                      description: Side chain destination address
                                    targetAddress:
                                      type: string
                                      format: address
                                      description: Mainnet destination address
                                    chainLocation:
                                      type: integer
                                      format: int32
                                      description: txHash chain location ( 1 - sidechain , 2 - mainnet)
                                    txHash:
                                      type: string
                                      description: Transaction hash
                                    requestTransId:
                                      type: integer
                                      format: int64
                                      description: Withdraw request transId (Optional) exists at state 0, 1, 2
                                    burnTransId:
                                      type: integer
                                      format: int64
                                      description: Burn transid (Optional) exists at state 3, 4
                                    remarks:
                                      type: string
                                      description: Error description (Optional) only exists at state -1
                                    transDate:
                                      type: integer
                                      format: int64
                                      description: trans date
                                    withdrawTxHash:
                                      type: string
                                      description: Identifier of withdraw transaction
  /user/withdrawAdminFee/{currencySymbol}:
    parameters:
      - in: header
        name: Authorization
        description: Login token
        schema:
          type: string
        required: true
      - in: path
        name: currencySymbol
        description: Currency name
        schema:
          type: string
        required: true
    get:
      tags:
        - user
      responses:
        200:
          description: successful operation
          content:
            "application/json":
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/GeneralResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          currency:
                            type: string
                            description: Currency name
                          fee:
                            type: integer
                            format: int64
                            description: Withdraw fee
                          decimal:
                            type: integer
                            format: int32
                            description: Withdraw fee decimal
                        required:
                          - currency
                          - fee
                          - decimal
  ###################################################################################

  /admin/login:
    post:
      tags:
        - admin
      summary: Admin login
      operationId: adminLogin
      requestBody:
        content:
          "application/json":
            schema:
              allOf:
                - $ref: "#/components/schemas/GeneralRequest"
                - type: object
                  properties:
                    username:
                      type: string
                      description: Admin username
                    password:
                      type: string
                      format: password
                      description: Hashed Admin password
                  required:
                    - username
                    - password
      responses:
        200:
          description: successful operation
          content:
            "application/json":
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/GeneralResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          loginToken:
                            type: string
                            description: Login token
                          expiryTime:
                            type: string
                            format: date-time
                            description: Token expiry timestamp

  /admin/merchant:
    post:
      tags:
        - admin
      summary: Create a merchant account. Merchant need to change his username and password when first login the system
      operationId: createMerchant
      parameters:
        - in: header
          name: Authorization
          description: Login token
          schema:
            type: string
          required: true
      requestBody:
        content:
          "application/json":
            schema:
              allOf:
                - $ref: "#/components/schemas/GeneralRequest"
                - type: object
                  properties:
                    username:
                      type: string
                      description: Merchant user name
                    password:
                      type: string
                      description: First time password
                    email:
                      type: string
                      description: Admin email
                    merchantName:
                      type: string
                      description: Merchant name
                    callbackUrl:
                      type: string
                      format: url
                      description: Merchant callback URL
                  required:
                    - username
                    - merchantName
      responses:
        200:
          description: successful operation
          content:
            "application/json":
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/GeneralResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          merchantId:
                            type: integer
                            format: int64
                            description: Merchant Id
                        required:
                          - merchantId
    get:
      tags:
        - admin
      summary: Query merchant list
      operationId: merchantList
      parameters:
        - in: header
          name: Authorization
          description: Login token
          schema:
            type: string
          required: true
      responses:
        200:
          description: successful operation
          content:
            "application/json":
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/GeneralResponse"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          type: object
                          properties:
                            merchantId:
                              type: integer
                              format: int64
                              description: Merchant id
                            merchantName:
                              type: string
                              description: Merchant name
                          required:
                            - merchantId
                            - merchantName

  /admin/merchant/{merchantId}:
    get:
      tags:
        - admin
      summary: Merchant details
      operationId: merchantDetails
      parameters:
        - in: header
          name: Authorization
          description: Login token
          schema:
            type: string
          required: true
        - name: merchantId
          description: Merchant Id
          schema:
            type: integer
          in: path
          required: true
      responses:
        200:
          description: successful operation
          content:
            "application/json":
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/GeneralResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          merchantName:
                            type: string
                            description: Merchant name
                          walletAddress:
                            type: string
                            format: address
                            description: Merchant Eurus wallet address
                          hotWalletAddress:
                            type: string
                            format: address
                            description: Merchant mainnet wallet address
                          callbackUrl:
                            type: string
                            format: url
                            description: callback url
                          updatedBy:
                            type: string
                            description: updated by
                          merchantAdminList:
                            type: array
                            items:
                              $ref: "#/components/schemas/MerchantAdmin"

  /admin/subAdmin:
    post:
      tags:
        - admin
      summary: Create a subadmin account.
      operationId: createSubAdmin
      parameters:
        - in: header
          name: Authorization
          description: Login token
          schema:
            type: string
          required: true
      requestBody:
        content:
          "application/json":
            schema:
              allOf:
                - $ref: "#/components/schemas/GeneralRequest"
                - type: object
                  properties:
                    username:
                      type: string
                      description: Admin username
                    password:
                      type: string
                      format: password
                      description: Password
                    roleList:
                      type: array
                      items:
                        type: integer
                        description: role ID
                  required:
                    - username
                    - password
                    - roleList

      responses:
        200:
          description: successful operation
          content:
            "application/json":
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/GeneralResponse"
    get:
      tags:
        - admin
      summary: Get sub admin account list.
      operationId: subAdminList
      parameters:
        - in: header
          name: Authorization
          description: Login token
          schema:
            type: string
          required: true
      responses:
        200:
          description: successful operation
          content:
            "application/json":
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/GeneralResponse"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          type: object
                          properties:
                            adminId:
                              type: integer
                              format: int64
                              description: Admin ID
                            username:
                              type: string
                              description: Admin username
                            roleList:
                              type: array
                              description: Role list
                              items:
                                type: integer
                                description: Role ID

  /admin/subAdmin/{adminId}:
    delete:
      summary: Delete sub admin account (Cannot delete self sub admin account nor master admin account)
      tags:
        - admin
      parameters:
        - in: header
          name: Authorization
          description: Login token
          schema:
            type: string
          required: true
        - name: adminId
          schema:
            type: integer
          in: path
          description: Admin ID
          required: true
      requestBody:
        content:
          "application/json":
            schema:
              allOf:
                - $ref: "#/components/schemas/GeneralRequest"
      responses:
        200:
          description: successful operation
          content:
            "application/json":
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/GeneralResponse"

  /admin/subAdmin/role/{adminId}:
    put:
      tags:
        - admin
      summary: Update sub admin account roles (Cannot update self sub admin account).
      operationId: subAdminList
      parameters:
        - in: header
          name: Authorization
          description: Login token
          schema:
            type: string
          required: true
        - name: adminId
          in: path
          schema:
            type: integer
          required: true
          description: Admin ID
      requestBody:
        content:
          "application/json":
            schema:
              allOf:
                - $ref: "#/components/schemas/GeneralRequest"
                - type: object
                  properties:
                    password:
                      type: string
                      format: password
                      description: Password
                    roleList:
                      type: array
                      items:
                        type: integer
                        description: role ID
      responses:
        200:
          description: successful operation
          content:
            "application/json":
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/GeneralResponse"

  /admin/subAdmin/password/{adminId}:
    put:
      tags:
        - admin
      summary: Update sub admin account password.
      operationId: subAdminList
      parameters:
        - in: header
          name: Authorization
          description: Login token
          schema:
            type: string
          required: true
        - name: adminId
          in: path
          schema:
            type: integer
          description: If adminId = 0, update self password
          required: true
      requestBody:
        content:
          "application/json":
            schema:
              allOf:
                - $ref: "#/components/schemas/GeneralRequest"
                - type: object
                  properties:
                    oldPassword:
                      type: string
                      format: password
                      description: If adminId = 0, this is the old password; otherwise, no need to send this field
                    password:
                      type: string
                      format: password
                      description: New password
                  required:
                    - password
      responses:
        200:
          description: successful operation
          content:
            "application/json":
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/GeneralResponse"

  /admin/subAdmin/status/{adminId}:
    parameters:
      - in: header
        name: Authorization
        description: Login token
        schema:
          type: string
        required: true
      - name: adminId
        in: path
        schema:
          type: integer
        required: true
    put:
      tags:
        - admin
      summary: Update sub admin account status (Cannot update self account nor master admin account)
      operationId: subAdminList
      requestBody:
        content:
          "application/json":
            schema:
              allOf:
                - $ref: "#/components/schemas/GeneralRequest"
                - type: object
                  properties:
                    status:
                      type: integer
                      format: int32
                      description: 0 - disabled; 1 -  enabled
      responses:
        200:
          description: successful operation
          content:
            "application/json":
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/GeneralResponse"

  /admin/permission:
    get:
      tags:
        - admin
      summary: Get permission list
      operationId: permission
      parameters:
        - in: header
          name: Authorization
          description: Login token
          schema:
            type: string
          required: true
      responses:
        200:
          description: successful operation
          content:
            "application/json":
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/GeneralResponse"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/Permission"
  /admin/role:
    get:
      tags:
        - admin
      summary: Get role list
      operationId: roleList
      parameters:
        - in: header
          name: Authorization
          description: Login token
          schema:
            type: string
          required: true
      responses:
        200:
          description: successful operation
          content:
            "application/json":
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/GeneralResponse"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          type: object
                          properties:
                            roleId:
                              type: integer
                              format: int64
                              description: Role ID
                            roleName:
                              type: string
                              description: Role name
  /admin/role/{roleId}:
    parameters:
      - in: header
        name: Authorization
        description: Login token
        schema:
          type: string
        required: true
      - name: roleId
        in: path
        schema:
          type: integer
          format: int64
        description: Role ID
        required: true
    get:
      tags:
        - admin
      summary: Get role details
      operationId: role
      responses:
        200:
          description: successful operation
          content:
            "application/json":
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/GeneralResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          roleId:
                            type: integer
                            format: int64
                            description: Role ID
                          roleName:
                            type: string
                            description: Role name
                          description:
                            type: string
                            description: Role description
                          createdBy:
                            type: string
                            description: Create by
                          permissionList:
                            type: array
                            items:
                              type: integer
                              format: int64
                              description: Permission ID for this role

    put:
      tags:
        - admin
      summary: Update a role permission
      requestBody:
        content:
          "application/json":
            schema:
              allOf:
                - $ref: "#/components/schemas/GeneralRequest"
                - type: object
                  properties:
                    roleId:
                      type: integer
                      format: int64
                      description: Role ID
                    roleName:
                      type: string
                      description: Role name
                    permissionList:
                      type: array
                      items:
                        type: integer
                        format: int64
                        description: Permission ID to updated. Empty list means no permission for this role
                  required:
                    - roleId
                    - permissionList
      responses:
        200:
          description: successful operation
          content:
            "application/json":
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/GeneralResponse"
    delete:
      tags:
        - admin
      summary: Delete a role
      responses:
        200:
          description: successful operation
          content:
            "application/json":
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/GeneralResponse"

  /admin/pendingWithdraw:
    parameters:
      - in: header
        name: Authorization
        description: Login token
        schema:
          type: string
        required: true
    get:
      tags:
        - admin
      summary: Query pending withdraw list
      responses:
        200:
          description: successful operation
          content:
            "application/json":
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/GeneralResponse"
                  - type: array
                    properties:
                      data:
                        type: array
                        items:
                          type: object
                          properties:
                            pendingId:
                              type: integer
                              format: int64
                              description: Pending queue Id
                            merchantId:
                              type: integer
                              description: Merchant Id
                            merchantName:
                              type: string
                              description: merchant name
                            fromWalletAddress:
                              type: string
                              description: Merchant Eurus wallet address
                            targetWalletAddress:
                              type: string
                              description: Merchant Mainnet wallet address
                            createDate:
                              type: string
                              format: date-time
                              description: Create date in UTC 0
                            status:
                              type: integer
                              description: Current status
  /admin/pendingWithdraw/{pendingWithdrawId}:
    put:
      tags:
        - admin
      summary: Approve or reject a withdraw request
      parameters:
        - in: header
          name: Authorization
          description: Login token
          schema:
            type: string
          required: true
        - in: path
          name: pendingWithdrawId
          description: Pending withdraw ID
          schema:
            type: integer
          required: true
      requestBody:
        content:
          "application/json":
            schema:
              allOf:
                - $ref: "#/components/schemas/GeneralRequest"
                - type: object
                  properties:
                    answer:
                      type: integer
                      description: 1 - approve, 2 - reject
                  required:
                    - answer
      responses:
        200:
          description: successful operation
          content:
            "application/json":
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/GeneralResponse"

  /admin/pendingWithdrawHistory:
    parameters:
      - in: header
        name: Authorization
        description: Login token
        schema:
          type: string
        required: true
    get:
      tags:
        - admin
      summary: Query pending approval history
      parameters:
        - in: query
          name: startDate
          description: Start date in UTC 0 inclusively
          schema:
            type: string
          required: true
        - in: query
          name: endDate
          description: End date in UTC 0 inclusively
          schema:
            type: string
          required: true
        - in: query
          name: merchantId
          description: Merchant Id
          schema:
            type: integer
          required: false
      responses:
        200:
          description: successful operation
          content:
            "application/json":
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/GeneralResponse"

  /admin/pendingConfirmAPISetting:
    parameters:
      - in: header
        name: Authorization
        description: Login token
        schema:
          type: string
        required: true
    get:
      tags:
        - admin
      summary: Query pending confirm API setting list
      responses:
        200:
          description: successful operation
          content:
            "application/json":
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/GeneralResponse"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          properties:
                            pendingConfigId:
                              type: integer
                              format: int64
                            withdrawConfirmUrl:
                              type: string
                              format: url
                            transferConfirmUrl:
                              type: string
                              format: url
                            ipList:
                              type: array
                              items:
                                type: string
                                description: IP":"port
                            merchantId:
                              type: integer
                              format: int64
                            submittedUser:
                              type: string
                              description: Merchant admin username
                            status:
                              type: integer
                              description: Pending status
                            createDate:
                              type: string
                              format: date-time
                              description: Create date time in UTC 0
                            lastModifiedDate:
                              type: string
                              format: date-time
                              description: Last update time
                            adminUser:
                              type: string
                              description: Approve or rejected by

  /admin/pendingConfirmAPISetting/{pendingId}:
    put:
      tags:
        - admin
      summary: Query pending confirm API setting list
      parameters:
        - in: header
          name: Authorization
          description: Login token
          schema:
            type: string
          required: true
        - in: path
          name: pendingId
          description: Pending ID for update
          schema:
            type: integer
          required: true
      requestBody:
        content:
          "application/json":
            schema:
              allOf:
                - $ref: "#/components/schemas/GeneralRequest"
      responses:
        200:
          description: successful operation
          content:
            "application/json":
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/GeneralResponse"

  /merchant/login:
    post:
      tags:
        - merchant
      summary: Merchant admin login
      requestBody:
        content:
          "application/json":
            schema:
              allOf:
                - $ref: "#/components/schemas/GeneralRequest"
                - type: object
                  properties:
                    merchantId:
                      type: integer
                      description: Merchant ID
                    username:
                      type: string
                      description: Merchant username
                    password:
                      type: string
                      format: password
                      description: Password hash
                  required:
                    - merchantId
                    - username
                    - password
      responses:
        200:
          description: successful operation
          content:
            "application/json":
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/GeneralResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          loginToken:
                            type: string
                            description: Login token
                          expiryTime:
                            type: string
                            format: date-time
                            description: Token expiry timestamp
  /merchant/initalizeWallet:
    parameters:
      - in: header
        name: Authorization
        description: Login token
        schema:
          type: string
        required: true
    post:
      tags:
        - merchant
      summary: Initialize merchant wallet
      requestBody:
        content:
          "application/json":
            schema:
              allOf:
                - $ref: "#/components/schemas/GeneralRequest"
                - type: object
                  properties:
                    walletWorkflowType:
                      type: integer
                      description: TBC
      responses:
        200:
          description: successful operation
          content:
            "application/json":
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/GeneralResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          walletAddress:
                            type: string
                            description: Eurus wallet address
                          hotWalletAddress:
                            type: string
                            description: Mainnet hot wallet address
  /merchant/subAdmin:
    post:
      tags:
        - merchant
      summary: Create a merchant subadmin account.
      operationId: createMerchantSubAdmin
      parameters:
        - in: header
          name: Authorization
          description: Login token
          schema:
            type: string
          required: true
      requestBody:
        content:
          "application/json":
            schema:
              allOf:
                - $ref: "#/components/schemas/GeneralRequest"
                - type: object
                  properties:
                    username:
                      type: string
                      description: Merchant admin username
                    loginPassword:
                      type: string
                      format: password
                      description: Login password
                    walletPassword:
                      type: string
                      format: password
                      description: Wallet password
                    email:
                      type: string
                      format: email
                      description: Email
                    roleList:
                      type: array
                      items:
                        type: integer
                        description: role ID
                  required:
                    - username
                    - loginPassword
                    - walletPassword
                    - roleList

      responses:
        200:
          description: successful operation
          content:
            "application/json":
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/GeneralResponse"
    get:
      tags:
        - merchant
      summary: Get merchant sub admin account list.
      operationId: merchantSubAdminList
      parameters:
        - in: header
          name: Authorization
          description: Login token
          schema:
            type: string
          required: true
      responses:
        200:
          description: successful operation
          content:
            "application/json":
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/GeneralResponse"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          type: object
                          properties:
                            adminId:
                              type: integer
                              format: int64
                              description: Admin ID
                            username:
                              type: string
                              description: Admin username
                            roleList:
                              type: array
                              description: Role list
                              items:
                                type: integer
                                description: Role ID

  /merchant/subAdmin/{merchantAdminId}:
    delete:
      summary: Delete merchant sub admin account (Cannot delete self sub admin account nor master admin account)
      tags:
        - merchant
      parameters:
        - in: header
          name: Authorization
          description: Login token
          schema:
            type: string
          required: true
        - name: merchantAdminId
          schema:
            type: integer
          in: path
          description: Merchant admin ID
          required: true
      requestBody:
        content:
          "application/json":
            schema:
              allOf:
                - $ref: "#/components/schemas/GeneralRequest"
      responses:
        200:
          description: successful operation
          content:
            "application/json":
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/GeneralResponse"
  /merchant/subAdmin/password/{merchantAdminId}:
    put:
      tags:
        - merchant
      summary: Update merchant sub admin account password.
      operationId: subAdminList
      parameters:
        - in: header
          name: Authorization
          description: Login token
          schema:
            type: string
          required: true
        - name: merchantAdminId
          in: path
          schema:
            type: integer
          description: If merchantAdminId = 0, update self password
          required: true
      requestBody:
        content:
          "application/json":
            schema:
              allOf:
                - $ref: "#/components/schemas/GeneralRequest"
                - type: object
                  properties:
                    oldPassword:
                      type: string
                      format: password
                      description: If adminId = 0, this is the old password; otherwise, no need to send this field
                    password:
                      type: string
                      format: password
                      description: New password
                  required:
                    - password
      responses:
        200:
          description: successful operation
          content:
            "application/json":
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/GeneralResponse"

  /merchant/subAdmin/status/{merchantAdminId}:
    parameters:
      - in: header
        name: Authorization
        description: Login token
        schema:
          type: string
        required: true
      - name: merchantAdminId
        in: path
        schema:
          type: integer
        required: true
    put:
      tags:
        - merchant
      summary: Update merchant sub admin account status (Cannot update self account nor master admin account)
      operationId: subAdminList
      requestBody:
        content:
          "application/json":
            schema:
              allOf:
                - $ref: "#/components/schemas/GeneralRequest"
                - type: object
                  properties:
                    status:
                      type: integer
                      format: int32
                      description: 0 - disabled; 1 -  enabled
      responses:
        200:
          description: successful operation
          content:
            "application/json":
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/GeneralResponse"
  /merchant/permission:
    get:
      tags:
        - merchant
      summary: Get permission list
      operationId: permission
      parameters:
        - in: header
          name: Authorization
          description: Login token
          schema:
            type: string
          required: true
      responses:
        200:
          description: successful operation
          content:
            "application/json":
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/GeneralResponse"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/Permission"
  /merchant/role:
    get:
      tags:
        - merchant
      summary: Get role list
      operationId: roleList
      parameters:
        - in: header
          name: Authorization
          description: Login token
          schema:
            type: string
          required: true
      responses:
        200:
          description: successful operation
          content:
            "application/json":
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/GeneralResponse"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          type: object
                          properties:
                            roleId:
                              type: integer
                              format: int64
                              description: Role ID
                            roleName:
                              type: string
                              description: Role name
  /merchant/role/{roleId}:
    parameters:
      - in: header
        name: Authorization
        description: Login token
        schema:
          type: string
        required: true
      - name: roleId
        in: path
        schema:
          type: integer
          format: int64
        description: Role ID
        required: true
    get:
      tags:
        - merchant
      summary: Get role details
      operationId: role
      responses:
        200:
          description: successful operation
          content:
            "application/json":
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/GeneralResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          roleId:
                            type: integer
                            format: int64
                            description: Role ID
                          roleName:
                            type: string
                            description: Role name
                          description:
                            type: string
                            description: Role description
                          createdBy:
                            type: string
                            description: Create by
                          permissionList:
                            type: array
                            items:
                              type: integer
                              format: int64
                              description: Permission ID for this role

    put:
      tags:
        - merchant
      summary: Update a role permission
      requestBody:
        content:
          "application/json":
            schema:
              allOf:
                - $ref: "#/components/schemas/GeneralRequest"
                - type: object
                  properties:
                    roleId:
                      type: integer
                      format: int64
                      description: Role ID
                    roleName:
                      type: string
                      description: Role name
                    permissionList:
                      type: array
                      items:
                        type: integer
                        format: int64
                        description: Permission ID to updated. Empty list means no permission for this role
                  required:
                    - roleId
                    - permissionList
      responses:
        200:
          description: successful operation
          content:
            "application/json":
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/GeneralResponse"
    delete:
      tags:
        - merchant
      summary: Delete a role
      responses:
        200:
          description: successful operation
          content:
            "application/json":
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/GeneralResponse"

  /merchant/transfer:
    post:
      tags:
        - merchant
      summary: Transfer to another Eurus address (this API does not support transfer to mainnet address)
      requestBody:
        content:
          "application/json":
            schema:
              type: object
              allOf:
                - $ref: "#/components/schemas/GeneralRequest"
                - type: object
                  properties:
                    walletPassword:
                      type: string
                      format: password
                      description: Wallet password
                    toAddress:
                      type: string
                      description: Eurus target address
                    amount:
                      type: string
                      description: Amount to transfer * 1000000000
                    assetName:
                      type: string
                      description: Asset to transfer
      responses:
        200:
          description: successful operation
          content:
            "application/json":
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/GeneralResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          needApproval:
                            type: boolean
                            description: Transfer is waiting for approval
  /merchant/withdraw:
    post:
      tags:
        - merchant
      summary: Withdraw money from Eurus wallet to mainnet wallet
      requestBody:
        content:
          "application/json":
            schema:
              type: object
              allOf:
                - $ref: "#/components/schemas/GeneralRequest"
                - type: object
                  properties:
                    walletPassword:
                      type: string
                      format: password
                      description: Wallet password
                    amount:
                      type: string
                      description: Amount to transfer * 1000000000
                    assetName:
                      type: string
                      description: Asset to transfer
      responses:
        200:
          description: successful operation
          content:
            "application/json":
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/GeneralResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          needApproval:
                            type: boolean
                            description: Transfer is waiting for approval

components:
  schemas:
    GeneralRequest:
      type: object
      properties:
        nonce:
          type: string
          format: uuid
          description: Request nonce
      required:
        - nonce

    GeneralResponse:
      type: object
      properties:
        nonce:
          type: string
          format: uuid
          description: Request nonce
        returnCode:
          type: integer
          description: Server return code - Reference to ServerReturnCode
        message:
          type: string
          description: Server returns message
        data:
          type: object
          description: Resquest specific response
    Permission:
      type: object
      properties:
        permissionId:
          type: integer
          format: int64
          description: Permission ID
        permissionName:
          type: string
          description: Permission name
        childList:
          type: array
          description: Child permission list
          items:
            type: object
            $ref: "#/components/schemas/Permission"
            description: child permission
      required:
        - permissionId
        - permissionName
    MerchantDetails:
      type: object
      properties:
        merchantName:
          type: string
          description: Merchant name
        walletAddress:
          type: string
          format: address
          description: Merchant Eurus wallet address
        hotWalletAddress:
          type: string
          format: address
          description: Merchant mainnet wallet address
        callbackUrl:
          type: string
          format: url
          description: callback url
        updatedBy:
          type: string
          description: updated by

    MerchantAdmin:
      type: object
      properties:
        username:
          type: string
          description: Merchant user name
        email:
          type: string
          format: email
          description: Merchant admin email
        status:
          type: integer
          format: int32
          description: Admin account state
        createDate:
          type: string
          format: date-time
          description: Create date
        lastModifiedDate:
          type: string
          format: date-time
          description: Last modified date
    ServerReturnCode:
      type: integer
      enum:
        - 0: Success
          1: Not Found
          2: Already exists
          3: Validation failed
          4: Invalid signature
          5: Login expired
          6: Invalid login token
          7: Permission denied
          100000: Database error begins

    CurrencySymbol:
      type: array
      description: Currency Symbol
      items:
        type: string
        description: Currency symbol of ERC20 assets

  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: http://petstore.swagger.io/oauth/dialog
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header
